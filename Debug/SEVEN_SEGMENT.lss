
SEVEN_SEGMENT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  00000e9a  00000f2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800110  00800110  00000fde  2**0
                  ALLOC
  3 .stab         00002244  00000000  00000000  00000fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f9a  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000041be  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000041d0  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  0000420c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  000046f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00004b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00004bb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 31       	cpi	r26, 0x10	; 16
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e1       	ldi	r26, 0x10	; 16
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 31       	cpi	r26, 0x1C	; 28
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <main>
  8a:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vInit>:
/* Inputs:  -> void																	*/
/* Outputs: -> void                                                      			*/
/************************************************************************************/

void DIO_vInit (void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/


	DIO_Register_DDRA = CONC_8BIT(DIO_u8_PIN0_INIT_DIR,  DIO_u8_PIN1_INIT_DIR,
  9a:	8a e3       	ldi	r24, 0x3A	; 58
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTA = CONC_8BIT(DIO_u8_PIN0_INIT_PORT_VAL,  DIO_u8_PIN1_INIT_PORT_VAL,
  a4:	8b e3       	ldi	r24, 0x3B	; 59
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	fc 01       	movw	r30, r24
  aa:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PINA = CONC_8BIT(DIO_u8_PIN0_INIT_PIN_VAL,  DIO_u8_PIN1_INIT_PIN_VAL,
  ac:	89 e3       	ldi	r24, 0x39	; 57
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fc 01       	movw	r30, r24
  b2:	10 82       	st	Z, r1
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/


	DIO_Register_DDRB = CONC_8BIT(DIO_u8_PIN8_INIT_DIR ,  DIO_u8_PIN9_INIT_DIR,
  b4:	87 e3       	ldi	r24, 0x37	; 55
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTB = CONC_8BIT(DIO_u8_PIN8_INIT_PORT_VAL ,  DIO_u8_PIN9_INIT_PORT_VAL,
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PINB = CONC_8BIT(DIO_u8_PIN8_INIT_PIN_VAL ,  DIO_u8_PIN9_INIT_PIN_VAL,
  c6:	86 e3       	ldi	r24, 0x36	; 54
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	10 82       	st	Z, r1
/* -------------------------------> Port C <----------------------------------------*/
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_DDRC = CONC_8BIT(DIO_u8_PIN16_INIT_DIR,  DIO_u8_PIN17_INIT_DIR,
  ce:	84 e3       	ldi	r24, 0x34	; 52
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	10 82       	st	Z, r1
								  DIO_u8_PIN18_INIT_DIR,  DIO_u8_PIN19_INIT_DIR,
								  DIO_u8_PIN20_INIT_DIR,  DIO_u8_PIN21_INIT_DIR,
								  DIO_u8_PIN22_INIT_DIR,  DIO_u8_PIN23_INIT_DIR);

	DIO_Register_PORTC = CONC_8BIT(DIO_u8_PIN16_INIT_PORT_VAL,  DIO_u8_PIN17_INIT_PORT_VAL,
  d6:	85 e3       	ldi	r24, 0x35	; 53
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	fc 01       	movw	r30, r24
  dc:	10 82       	st	Z, r1
								  DIO_u8_PIN18_INIT_PORT_VAL,  DIO_u8_PIN19_INIT_PORT_VAL,
								  DIO_u8_PIN20_INIT_PORT_VAL,  DIO_u8_PIN21_INIT_PORT_VAL,
								  DIO_u8_PIN22_INIT_PORT_VAL,  DIO_u8_PIN23_INIT_PORT_VAL);

	DIO_Register_PINC = CONC_8BIT(DIO_u8_PIN16_INIT_PIN_VAL,  DIO_u8_PIN17_INIT_PIN_VAL,
  de:	83 e3       	ldi	r24, 0x33	; 51
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	10 82       	st	Z, r1
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/

/* -------------------------------> Port D <----------------------------------------*/
	DIO_Register_DDRD = CONC_8BIT(DIO_u8_PIN24_INIT_DIR,  DIO_u8_PIN25_INIT_DIR,
  e6:	81 e3       	ldi	r24, 0x31	; 49
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTD = CONC_8BIT(DIO_u8_PIN24_INIT_PORT_VAL,  DIO_u8_PIN25_INIT_PORT_VAL,
  f0:	82 e3       	ldi	r24, 0x32	; 50
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PIND = CONC_8BIT(DIO_u8_PIN24_INIT_PIN_VAL,  DIO_u8_PIN25_INIT_PIN_VAL,
  f8:	80 e3       	ldi	r24, 0x30	; 48
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	fc 01       	movw	r30, r24
  fe:	10 82       	st	Z, r1
        #define DIO_PIN31_INIT_VALUE   DIO_PIN_INIT_VAL_LOW
      #endif

/************************************************************************************/

}
 100:	00 00       	nop
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <DIO_u8SetPinDirection>:
/*          -> Direction (copy_u8Direction) (either 0 for input or 1 for output)	*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPinDirection(u8 copy_u8PinNB, u8 copy_u8Direction)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	00 d0       	rcall	.+0      	; 0x10e <DIO_u8SetPinDirection+0x6>
 10e:	0f 92       	push	r0
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	8a 83       	std	Y+2, r24	; 0x02
 116:	6b 83       	std	Y+3, r22	; 0x03
/*===========================>> Local variables <<==================================*/

	u8 local_u8Error  = STD_ERROR_OK; /* ----> This is used as a return value       */
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	89 83       	std	Y+1, r24	; 0x01


	/* validates the input if it's more than maximum number of pins					*/

	if(copy_u8PinNB < DIO_MAXPINNB)
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	80 32       	cpi	r24, 0x20	; 32
 120:	08 f0       	brcs	.+2      	; 0x124 <DIO_u8SetPinDirection+0x1c>
 122:	da c0       	rjmp	.+436    	; 0x2d8 <DIO_u8SetPinDirection+0x1d0>
	{
		switch (copy_u8Direction)
 124:	8b 81       	ldd	r24, Y+3	; 0x03
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	21 f0       	breq	.+8      	; 0x136 <DIO_u8SetPinDirection+0x2e>
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	09 f4       	brne	.+2      	; 0x134 <DIO_u8SetPinDirection+0x2c>
 132:	6d c0       	rjmp	.+218    	; 0x20e <DIO_u8SetPinDirection+0x106>
 134:	ce c0       	rjmp	.+412    	; 0x2d2 <DIO_u8SetPinDirection+0x1ca>
		{
			case DIO_PIN_INPUT:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 136:	8a 81       	ldd	r24, Y+2	; 0x02
 138:	88 30       	cpi	r24, 0x08	; 8
 13a:	a8 f4       	brcc	.+42     	; 0x166 <DIO_u8SetPinDirection+0x5e>
				{
					DIO_Register_DDRA = RESET_BIT(DIO_Register_DDRA, copy_u8PinNB);
 13c:	8a e3       	ldi	r24, 0x3A	; 58
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	80 81       	ld	r24, Z
 144:	28 2f       	mov	r18, r24
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	88 2f       	mov	r24, r24
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	87 70       	andi	r24, 0x07	; 7
 14e:	99 27       	eor	r25, r25
 150:	89 5f       	subi	r24, 0xF9	; 249
 152:	9e 4f       	sbci	r25, 0xFE	; 254
 154:	fc 01       	movw	r30, r24
 156:	80 81       	ld	r24, Z
 158:	80 95       	com	r24
 15a:	28 23       	and	r18, r24
 15c:	8a e3       	ldi	r24, 0x3A	; 58
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_DDRD = RESET_BIT(DIO_Register_DDRD, copy_u8PinNB);
				}
				break;
 164:	bb c0       	rjmp	.+374    	; 0x2dc <DIO_u8SetPinDirection+0x1d4>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	88 30       	cpi	r24, 0x08	; 8
 16a:	c0 f0       	brcs	.+48     	; 0x19c <DIO_u8SetPinDirection+0x94>
 16c:	8a 81       	ldd	r24, Y+2	; 0x02
 16e:	80 31       	cpi	r24, 0x10	; 16
 170:	a8 f4       	brcc	.+42     	; 0x19c <DIO_u8SetPinDirection+0x94>
					DIO_Register_DDRB = RESET_BIT(DIO_Register_DDRB, copy_u8PinNB);
 172:	87 e3       	ldi	r24, 0x37	; 55
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	fc 01       	movw	r30, r24
 178:	80 81       	ld	r24, Z
 17a:	28 2f       	mov	r18, r24
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	88 2f       	mov	r24, r24
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	87 70       	andi	r24, 0x07	; 7
 184:	99 27       	eor	r25, r25
 186:	89 5f       	subi	r24, 0xF9	; 249
 188:	9e 4f       	sbci	r25, 0xFE	; 254
 18a:	fc 01       	movw	r30, r24
 18c:	80 81       	ld	r24, Z
 18e:	80 95       	com	r24
 190:	28 23       	and	r18, r24
 192:	87 e3       	ldi	r24, 0x37	; 55
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
 19a:	38 c0       	rjmp	.+112    	; 0x20c <DIO_u8SetPinDirection+0x104>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	80 31       	cpi	r24, 0x10	; 16
 1a0:	c0 f0       	brcs	.+48     	; 0x1d2 <DIO_u8SetPinDirection+0xca>
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	88 31       	cpi	r24, 0x18	; 24
 1a6:	a8 f4       	brcc	.+42     	; 0x1d2 <DIO_u8SetPinDirection+0xca>
					DIO_Register_DDRC = RESET_BIT(DIO_Register_DDRC, copy_u8PinNB);
 1a8:	84 e3       	ldi	r24, 0x34	; 52
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	28 2f       	mov	r18, r24
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	88 2f       	mov	r24, r24
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	87 70       	andi	r24, 0x07	; 7
 1ba:	99 27       	eor	r25, r25
 1bc:	89 5f       	subi	r24, 0xF9	; 249
 1be:	9e 4f       	sbci	r25, 0xFE	; 254
 1c0:	fc 01       	movw	r30, r24
 1c2:	80 81       	ld	r24, Z
 1c4:	80 95       	com	r24
 1c6:	28 23       	and	r18, r24
 1c8:	84 e3       	ldi	r24, 0x34	; 52
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
 1d0:	1d c0       	rjmp	.+58     	; 0x20c <DIO_u8SetPinDirection+0x104>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	88 31       	cpi	r24, 0x18	; 24
 1d6:	08 f4       	brcc	.+2      	; 0x1da <DIO_u8SetPinDirection+0xd2>
 1d8:	81 c0       	rjmp	.+258    	; 0x2dc <DIO_u8SetPinDirection+0x1d4>
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	80 32       	cpi	r24, 0x20	; 32
 1de:	08 f0       	brcs	.+2      	; 0x1e2 <DIO_u8SetPinDirection+0xda>
 1e0:	7d c0       	rjmp	.+250    	; 0x2dc <DIO_u8SetPinDirection+0x1d4>
					DIO_Register_DDRD = RESET_BIT(DIO_Register_DDRD, copy_u8PinNB);
 1e2:	81 e3       	ldi	r24, 0x31	; 49
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	fc 01       	movw	r30, r24
 1e8:	80 81       	ld	r24, Z
 1ea:	28 2f       	mov	r18, r24
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	88 2f       	mov	r24, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	87 70       	andi	r24, 0x07	; 7
 1f4:	99 27       	eor	r25, r25
 1f6:	89 5f       	subi	r24, 0xF9	; 249
 1f8:	9e 4f       	sbci	r25, 0xFE	; 254
 1fa:	fc 01       	movw	r30, r24
 1fc:	80 81       	ld	r24, Z
 1fe:	80 95       	com	r24
 200:	28 23       	and	r18, r24
 202:	81 e3       	ldi	r24, 0x31	; 49
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
				break;
 20a:	68 c0       	rjmp	.+208    	; 0x2dc <DIO_u8SetPinDirection+0x1d4>
 20c:	67 c0       	rjmp	.+206    	; 0x2dc <DIO_u8SetPinDirection+0x1d4>

			case DIO_PIN_OUTPUT:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	88 30       	cpi	r24, 0x08	; 8
 212:	98 f4       	brcc	.+38     	; 0x23a <DIO_u8SetPinDirection+0x132>
				{
					DIO_Register_DDRA = SET_BIT(DIO_Register_DDRA, copy_u8PinNB);
 214:	8a e3       	ldi	r24, 0x3A	; 58
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	fc 01       	movw	r30, r24
 21a:	30 81       	ld	r19, Z
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	88 2f       	mov	r24, r24
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	87 70       	andi	r24, 0x07	; 7
 224:	99 27       	eor	r25, r25
 226:	89 5f       	subi	r24, 0xF9	; 249
 228:	9e 4f       	sbci	r25, 0xFE	; 254
 22a:	fc 01       	movw	r30, r24
 22c:	20 81       	ld	r18, Z
 22e:	8a e3       	ldi	r24, 0x3A	; 58
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	23 2b       	or	r18, r19
 234:	fc 01       	movw	r30, r24
 236:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_DDRD = SET_BIT(DIO_Register_DDRD, copy_u8PinNB);
				}
				break;
 238:	53 c0       	rjmp	.+166    	; 0x2e0 <DIO_u8SetPinDirection+0x1d8>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	88 30       	cpi	r24, 0x08	; 8
 23e:	b0 f0       	brcs	.+44     	; 0x26c <DIO_u8SetPinDirection+0x164>
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	80 31       	cpi	r24, 0x10	; 16
 244:	98 f4       	brcc	.+38     	; 0x26c <DIO_u8SetPinDirection+0x164>
					DIO_Register_DDRB = SET_BIT(DIO_Register_DDRB, copy_u8PinNB);
 246:	87 e3       	ldi	r24, 0x37	; 55
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	fc 01       	movw	r30, r24
 24c:	30 81       	ld	r19, Z
 24e:	8a 81       	ldd	r24, Y+2	; 0x02
 250:	88 2f       	mov	r24, r24
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	87 70       	andi	r24, 0x07	; 7
 256:	99 27       	eor	r25, r25
 258:	89 5f       	subi	r24, 0xF9	; 249
 25a:	9e 4f       	sbci	r25, 0xFE	; 254
 25c:	fc 01       	movw	r30, r24
 25e:	20 81       	ld	r18, Z
 260:	87 e3       	ldi	r24, 0x37	; 55
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	23 2b       	or	r18, r19
 266:	fc 01       	movw	r30, r24
 268:	20 83       	st	Z, r18
 26a:	32 c0       	rjmp	.+100    	; 0x2d0 <DIO_u8SetPinDirection+0x1c8>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	80 31       	cpi	r24, 0x10	; 16
 270:	b0 f0       	brcs	.+44     	; 0x29e <DIO_u8SetPinDirection+0x196>
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	88 31       	cpi	r24, 0x18	; 24
 276:	98 f4       	brcc	.+38     	; 0x29e <DIO_u8SetPinDirection+0x196>
					DIO_Register_DDRC = SET_BIT(DIO_Register_DDRC, copy_u8PinNB);
 278:	84 e3       	ldi	r24, 0x34	; 52
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	fc 01       	movw	r30, r24
 27e:	30 81       	ld	r19, Z
 280:	8a 81       	ldd	r24, Y+2	; 0x02
 282:	88 2f       	mov	r24, r24
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	87 70       	andi	r24, 0x07	; 7
 288:	99 27       	eor	r25, r25
 28a:	89 5f       	subi	r24, 0xF9	; 249
 28c:	9e 4f       	sbci	r25, 0xFE	; 254
 28e:	fc 01       	movw	r30, r24
 290:	20 81       	ld	r18, Z
 292:	84 e3       	ldi	r24, 0x34	; 52
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	23 2b       	or	r18, r19
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
 29c:	19 c0       	rjmp	.+50     	; 0x2d0 <DIO_u8SetPinDirection+0x1c8>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	88 31       	cpi	r24, 0x18	; 24
 2a2:	f0 f0       	brcs	.+60     	; 0x2e0 <DIO_u8SetPinDirection+0x1d8>
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	80 32       	cpi	r24, 0x20	; 32
 2a8:	d8 f4       	brcc	.+54     	; 0x2e0 <DIO_u8SetPinDirection+0x1d8>
					DIO_Register_DDRD = SET_BIT(DIO_Register_DDRD, copy_u8PinNB);
 2aa:	81 e3       	ldi	r24, 0x31	; 49
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	fc 01       	movw	r30, r24
 2b0:	30 81       	ld	r19, Z
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	88 2f       	mov	r24, r24
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	87 70       	andi	r24, 0x07	; 7
 2ba:	99 27       	eor	r25, r25
 2bc:	89 5f       	subi	r24, 0xF9	; 249
 2be:	9e 4f       	sbci	r25, 0xFE	; 254
 2c0:	fc 01       	movw	r30, r24
 2c2:	20 81       	ld	r18, Z
 2c4:	81 e3       	ldi	r24, 0x31	; 49
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	23 2b       	or	r18, r19
 2ca:	fc 01       	movw	r30, r24
 2cc:	20 83       	st	Z, r18
				break;
 2ce:	08 c0       	rjmp	.+16     	; 0x2e0 <DIO_u8SetPinDirection+0x1d8>
 2d0:	07 c0       	rjmp	.+14     	; 0x2e0 <DIO_u8SetPinDirection+0x1d8>

			default:
				local_u8Error = STD_ERROR_NOK;
 2d2:	19 82       	std	Y+1, r1	; 0x01
				break;
 2d4:	00 00       	nop
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <DIO_u8SetPinDirection+0x1da>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 2d8:	19 82       	std	Y+1, r1	; 0x01
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <DIO_u8SetPinDirection+0x1da>
				break;
 2dc:	00 00       	nop
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <DIO_u8SetPinDirection+0x1da>
				break;
 2e0:	00 00       	nop
	}

	return local_u8Error;
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
}
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <DIO_u8SetPinValue>:
/*          -> Value (copy_u8Value) (either 0 or 1)	                                */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPinValue(u8 copy_u8PinNB, u8 copy_u8Value)
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <DIO_u8SetPinValue+0x6>
 2f6:	0f 92       	push	r0
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	8a 83       	std	Y+2, r24	; 0x02
 2fe:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	89 83       	std	Y+1, r24	; 0x01

	/* Validates the input to check whether the user enter the
	 * correct pin number, and whether he enters the right which
	 * is not bigger than upper limit.
	 */
	if(copy_u8PinNB < DIO_MAXPINNB)
 304:	8a 81       	ldd	r24, Y+2	; 0x02
 306:	80 32       	cpi	r24, 0x20	; 32
 308:	08 f0       	brcs	.+2      	; 0x30c <DIO_u8SetPinValue+0x1c>
 30a:	d9 c0       	rjmp	.+434    	; 0x4be <__FUSE_REGION_LENGTH__+0xbe>
	{
		switch(copy_u8Value)
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	88 2f       	mov	r24, r24
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	00 97       	sbiw	r24, 0x00	; 0
 314:	21 f0       	breq	.+8      	; 0x31e <DIO_u8SetPinValue+0x2e>
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	09 f4       	brne	.+2      	; 0x31c <DIO_u8SetPinValue+0x2c>
 31a:	6d c0       	rjmp	.+218    	; 0x3f6 <DIO_u8SetPinValue+0x106>
 31c:	ce c0       	rjmp	.+412    	; 0x4ba <__FUSE_REGION_LENGTH__+0xba>
		{
			case DIO_PIN_LOW:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	88 30       	cpi	r24, 0x08	; 8
 322:	a8 f4       	brcc	.+42     	; 0x34e <DIO_u8SetPinValue+0x5e>
				{
					DIO_Register_PORTA = RESET_BIT(DIO_Register_PORTA, copy_u8PinNB);
 324:	8b e3       	ldi	r24, 0x3B	; 59
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	fc 01       	movw	r30, r24
 32a:	80 81       	ld	r24, Z
 32c:	28 2f       	mov	r18, r24
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	88 2f       	mov	r24, r24
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	87 70       	andi	r24, 0x07	; 7
 336:	99 27       	eor	r25, r25
 338:	89 5f       	subi	r24, 0xF9	; 249
 33a:	9e 4f       	sbci	r25, 0xFE	; 254
 33c:	fc 01       	movw	r30, r24
 33e:	80 81       	ld	r24, Z
 340:	80 95       	com	r24
 342:	28 23       	and	r18, r24
 344:	8b e3       	ldi	r24, 0x3B	; 59
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	fc 01       	movw	r30, r24
 34a:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_PORTD = RESET_BIT(DIO_Register_PORTD, copy_u8PinNB);
				}
				break;
 34c:	ba c0       	rjmp	.+372    	; 0x4c2 <__FUSE_REGION_LENGTH__+0xc2>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 34e:	8a 81       	ldd	r24, Y+2	; 0x02
 350:	88 30       	cpi	r24, 0x08	; 8
 352:	c0 f0       	brcs	.+48     	; 0x384 <DIO_u8SetPinValue+0x94>
 354:	8a 81       	ldd	r24, Y+2	; 0x02
 356:	80 31       	cpi	r24, 0x10	; 16
 358:	a8 f4       	brcc	.+42     	; 0x384 <DIO_u8SetPinValue+0x94>
					DIO_Register_PORTB = RESET_BIT(DIO_Register_PORTB, copy_u8PinNB);
 35a:	88 e3       	ldi	r24, 0x38	; 56
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	fc 01       	movw	r30, r24
 360:	80 81       	ld	r24, Z
 362:	28 2f       	mov	r18, r24
 364:	8a 81       	ldd	r24, Y+2	; 0x02
 366:	88 2f       	mov	r24, r24
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	87 70       	andi	r24, 0x07	; 7
 36c:	99 27       	eor	r25, r25
 36e:	89 5f       	subi	r24, 0xF9	; 249
 370:	9e 4f       	sbci	r25, 0xFE	; 254
 372:	fc 01       	movw	r30, r24
 374:	80 81       	ld	r24, Z
 376:	80 95       	com	r24
 378:	28 23       	and	r18, r24
 37a:	88 e3       	ldi	r24, 0x38	; 56
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	fc 01       	movw	r30, r24
 380:	20 83       	st	Z, r18
 382:	38 c0       	rjmp	.+112    	; 0x3f4 <DIO_u8SetPinValue+0x104>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	80 31       	cpi	r24, 0x10	; 16
 388:	c0 f0       	brcs	.+48     	; 0x3ba <DIO_u8SetPinValue+0xca>
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	88 31       	cpi	r24, 0x18	; 24
 38e:	a8 f4       	brcc	.+42     	; 0x3ba <DIO_u8SetPinValue+0xca>
					DIO_Register_PORTC = RESET_BIT(DIO_Register_PORTC, copy_u8PinNB);
 390:	85 e3       	ldi	r24, 0x35	; 53
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	fc 01       	movw	r30, r24
 396:	80 81       	ld	r24, Z
 398:	28 2f       	mov	r18, r24
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
 39c:	88 2f       	mov	r24, r24
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	87 70       	andi	r24, 0x07	; 7
 3a2:	99 27       	eor	r25, r25
 3a4:	89 5f       	subi	r24, 0xF9	; 249
 3a6:	9e 4f       	sbci	r25, 0xFE	; 254
 3a8:	fc 01       	movw	r30, r24
 3aa:	80 81       	ld	r24, Z
 3ac:	80 95       	com	r24
 3ae:	28 23       	and	r18, r24
 3b0:	85 e3       	ldi	r24, 0x35	; 53
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	fc 01       	movw	r30, r24
 3b6:	20 83       	st	Z, r18
 3b8:	1d c0       	rjmp	.+58     	; 0x3f4 <DIO_u8SetPinValue+0x104>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 3ba:	8a 81       	ldd	r24, Y+2	; 0x02
 3bc:	88 31       	cpi	r24, 0x18	; 24
 3be:	08 f4       	brcc	.+2      	; 0x3c2 <DIO_u8SetPinValue+0xd2>
 3c0:	80 c0       	rjmp	.+256    	; 0x4c2 <__FUSE_REGION_LENGTH__+0xc2>
 3c2:	8a 81       	ldd	r24, Y+2	; 0x02
 3c4:	80 32       	cpi	r24, 0x20	; 32
 3c6:	08 f0       	brcs	.+2      	; 0x3ca <DIO_u8SetPinValue+0xda>
 3c8:	7c c0       	rjmp	.+248    	; 0x4c2 <__FUSE_REGION_LENGTH__+0xc2>
					DIO_Register_PORTD = RESET_BIT(DIO_Register_PORTD, copy_u8PinNB);
 3ca:	82 e3       	ldi	r24, 0x32	; 50
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	fc 01       	movw	r30, r24
 3d0:	80 81       	ld	r24, Z
 3d2:	28 2f       	mov	r18, r24
 3d4:	8a 81       	ldd	r24, Y+2	; 0x02
 3d6:	88 2f       	mov	r24, r24
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	87 70       	andi	r24, 0x07	; 7
 3dc:	99 27       	eor	r25, r25
 3de:	89 5f       	subi	r24, 0xF9	; 249
 3e0:	9e 4f       	sbci	r25, 0xFE	; 254
 3e2:	fc 01       	movw	r30, r24
 3e4:	80 81       	ld	r24, Z
 3e6:	80 95       	com	r24
 3e8:	28 23       	and	r18, r24
 3ea:	82 e3       	ldi	r24, 0x32	; 50
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	fc 01       	movw	r30, r24
 3f0:	20 83       	st	Z, r18
				break;
 3f2:	67 c0       	rjmp	.+206    	; 0x4c2 <__FUSE_REGION_LENGTH__+0xc2>
 3f4:	66 c0       	rjmp	.+204    	; 0x4c2 <__FUSE_REGION_LENGTH__+0xc2>

			case DIO_PIN_HIGH:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 3f6:	8a 81       	ldd	r24, Y+2	; 0x02
 3f8:	88 30       	cpi	r24, 0x08	; 8
 3fa:	98 f4       	brcc	.+38     	; 0x422 <__FUSE_REGION_LENGTH__+0x22>
				{
					DIO_Register_PORTA = SET_BIT(DIO_Register_PORTA, copy_u8PinNB);
 3fc:	8b e3       	ldi	r24, 0x3B	; 59
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	fc 01       	movw	r30, r24
 402:	30 81       	ld	r19, Z
 404:	8a 81       	ldd	r24, Y+2	; 0x02
 406:	88 2f       	mov	r24, r24
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	87 70       	andi	r24, 0x07	; 7
 40c:	99 27       	eor	r25, r25
 40e:	89 5f       	subi	r24, 0xF9	; 249
 410:	9e 4f       	sbci	r25, 0xFE	; 254
 412:	fc 01       	movw	r30, r24
 414:	20 81       	ld	r18, Z
 416:	8b e3       	ldi	r24, 0x3B	; 59
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	23 2b       	or	r18, r19
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_PORTD = SET_BIT(DIO_Register_PORTD, copy_u8PinNB);
				}
				break;
 420:	52 c0       	rjmp	.+164    	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	88 30       	cpi	r24, 0x08	; 8
 426:	b0 f0       	brcs	.+44     	; 0x454 <__FUSE_REGION_LENGTH__+0x54>
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	80 31       	cpi	r24, 0x10	; 16
 42c:	98 f4       	brcc	.+38     	; 0x454 <__FUSE_REGION_LENGTH__+0x54>
					DIO_Register_PORTB = SET_BIT(DIO_Register_PORTB, copy_u8PinNB);
 42e:	88 e3       	ldi	r24, 0x38	; 56
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	fc 01       	movw	r30, r24
 434:	30 81       	ld	r19, Z
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	88 2f       	mov	r24, r24
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	87 70       	andi	r24, 0x07	; 7
 43e:	99 27       	eor	r25, r25
 440:	89 5f       	subi	r24, 0xF9	; 249
 442:	9e 4f       	sbci	r25, 0xFE	; 254
 444:	fc 01       	movw	r30, r24
 446:	20 81       	ld	r18, Z
 448:	88 e3       	ldi	r24, 0x38	; 56
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	23 2b       	or	r18, r19
 44e:	fc 01       	movw	r30, r24
 450:	20 83       	st	Z, r18
 452:	32 c0       	rjmp	.+100    	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	80 31       	cpi	r24, 0x10	; 16
 458:	b0 f0       	brcs	.+44     	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
 45a:	8a 81       	ldd	r24, Y+2	; 0x02
 45c:	88 31       	cpi	r24, 0x18	; 24
 45e:	98 f4       	brcc	.+38     	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
					DIO_Register_PORTC = SET_BIT(DIO_Register_PORTC, copy_u8PinNB);
 460:	85 e3       	ldi	r24, 0x35	; 53
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	fc 01       	movw	r30, r24
 466:	30 81       	ld	r19, Z
 468:	8a 81       	ldd	r24, Y+2	; 0x02
 46a:	88 2f       	mov	r24, r24
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	87 70       	andi	r24, 0x07	; 7
 470:	99 27       	eor	r25, r25
 472:	89 5f       	subi	r24, 0xF9	; 249
 474:	9e 4f       	sbci	r25, 0xFE	; 254
 476:	fc 01       	movw	r30, r24
 478:	20 81       	ld	r18, Z
 47a:	85 e3       	ldi	r24, 0x35	; 53
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	23 2b       	or	r18, r19
 480:	fc 01       	movw	r30, r24
 482:	20 83       	st	Z, r18
 484:	19 c0       	rjmp	.+50     	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 486:	8a 81       	ldd	r24, Y+2	; 0x02
 488:	88 31       	cpi	r24, 0x18	; 24
 48a:	e8 f0       	brcs	.+58     	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
 48c:	8a 81       	ldd	r24, Y+2	; 0x02
 48e:	80 32       	cpi	r24, 0x20	; 32
 490:	d0 f4       	brcc	.+52     	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
					DIO_Register_PORTD = SET_BIT(DIO_Register_PORTD, copy_u8PinNB);
 492:	82 e3       	ldi	r24, 0x32	; 50
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	fc 01       	movw	r30, r24
 498:	30 81       	ld	r19, Z
 49a:	8a 81       	ldd	r24, Y+2	; 0x02
 49c:	88 2f       	mov	r24, r24
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	87 70       	andi	r24, 0x07	; 7
 4a2:	99 27       	eor	r25, r25
 4a4:	89 5f       	subi	r24, 0xF9	; 249
 4a6:	9e 4f       	sbci	r25, 0xFE	; 254
 4a8:	fc 01       	movw	r30, r24
 4aa:	20 81       	ld	r18, Z
 4ac:	82 e3       	ldi	r24, 0x32	; 50
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	23 2b       	or	r18, r19
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 83       	st	Z, r18
				break;
 4b6:	07 c0       	rjmp	.+14     	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
 4b8:	06 c0       	rjmp	.+12     	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>

			default:
				local_u8Error = STD_ERROR_NOK;
 4ba:	19 82       	std	Y+1, r1	; 0x01
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__FUSE_REGION_LENGTH__+0xc8>
		}

	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 4be:	19 82       	std	Y+1, r1	; 0x01
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <__FUSE_REGION_LENGTH__+0xc8>
				break;
 4c2:	00 00       	nop
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <__FUSE_REGION_LENGTH__+0xc8>
				break;
 4c6:	00 00       	nop
	}

	return local_u8Error;
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
}
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	0f 90       	pop	r0
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <DIO_u8ReadPinValue>:
/*          -> Location (copy_u8Value)                        						*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8ReadPinValue(u8 copy_u8PinNB, u8 * copy_pu8Value)
{
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	00 d0       	rcall	.+0      	; 0x4dc <DIO_u8ReadPinValue+0x6>
 4dc:	00 d0       	rcall	.+0      	; 0x4de <DIO_u8ReadPinValue+0x8>
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	8a 83       	std	Y+2, r24	; 0x02
 4e4:	7c 83       	std	Y+4, r23	; 0x04
 4e6:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PinNB < DIO_MAXPINNB) && (copy_pu8Value != NULL))
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	80 32       	cpi	r24, 0x20	; 32
 4f0:	08 f0       	brcs	.+2      	; 0x4f4 <DIO_u8ReadPinValue+0x1e>
 4f2:	60 c0       	rjmp	.+192    	; 0x5b4 <DIO_u8ReadPinValue+0xde>
 4f4:	8b 81       	ldd	r24, Y+3	; 0x03
 4f6:	9c 81       	ldd	r25, Y+4	; 0x04
 4f8:	89 2b       	or	r24, r25
 4fa:	09 f4       	brne	.+2      	; 0x4fe <DIO_u8ReadPinValue+0x28>
 4fc:	5b c0       	rjmp	.+182    	; 0x5b4 <DIO_u8ReadPinValue+0xde>
	{
		if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 4fe:	8a 81       	ldd	r24, Y+2	; 0x02
 500:	88 30       	cpi	r24, 0x08	; 8
 502:	88 f4       	brcc	.+34     	; 0x526 <DIO_u8ReadPinValue+0x50>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINA, copy_u8PinNB);
 504:	89 e3       	ldi	r24, 0x39	; 57
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	fc 01       	movw	r30, r24
 50a:	20 81       	ld	r18, Z
 50c:	8a 81       	ldd	r24, Y+2	; 0x02
 50e:	88 2f       	mov	r24, r24
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	89 5f       	subi	r24, 0xF9	; 249
 514:	9e 4f       	sbci	r25, 0xFE	; 254
 516:	fc 01       	movw	r30, r24
 518:	80 81       	ld	r24, Z
 51a:	28 23       	and	r18, r24
 51c:	8b 81       	ldd	r24, Y+3	; 0x03
 51e:	9c 81       	ldd	r25, Y+4	; 0x04
 520:	fc 01       	movw	r30, r24
 522:	20 83       	st	Z, r18
 524:	44 c0       	rjmp	.+136    	; 0x5ae <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 526:	8a 81       	ldd	r24, Y+2	; 0x02
 528:	88 30       	cpi	r24, 0x08	; 8
 52a:	a0 f0       	brcs	.+40     	; 0x554 <DIO_u8ReadPinValue+0x7e>
 52c:	8a 81       	ldd	r24, Y+2	; 0x02
 52e:	80 31       	cpi	r24, 0x10	; 16
 530:	88 f4       	brcc	.+34     	; 0x554 <DIO_u8ReadPinValue+0x7e>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINB, copy_u8PinNB);
 532:	86 e3       	ldi	r24, 0x36	; 54
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	fc 01       	movw	r30, r24
 538:	20 81       	ld	r18, Z
 53a:	8a 81       	ldd	r24, Y+2	; 0x02
 53c:	88 2f       	mov	r24, r24
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	89 5f       	subi	r24, 0xF9	; 249
 542:	9e 4f       	sbci	r25, 0xFE	; 254
 544:	fc 01       	movw	r30, r24
 546:	80 81       	ld	r24, Z
 548:	28 23       	and	r18, r24
 54a:	8b 81       	ldd	r24, Y+3	; 0x03
 54c:	9c 81       	ldd	r25, Y+4	; 0x04
 54e:	fc 01       	movw	r30, r24
 550:	20 83       	st	Z, r18
 552:	2d c0       	rjmp	.+90     	; 0x5ae <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	80 31       	cpi	r24, 0x10	; 16
 558:	a0 f0       	brcs	.+40     	; 0x582 <DIO_u8ReadPinValue+0xac>
 55a:	8a 81       	ldd	r24, Y+2	; 0x02
 55c:	88 31       	cpi	r24, 0x18	; 24
 55e:	88 f4       	brcc	.+34     	; 0x582 <DIO_u8ReadPinValue+0xac>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINC, copy_u8PinNB);
 560:	83 e3       	ldi	r24, 0x33	; 51
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	fc 01       	movw	r30, r24
 566:	20 81       	ld	r18, Z
 568:	8a 81       	ldd	r24, Y+2	; 0x02
 56a:	88 2f       	mov	r24, r24
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	89 5f       	subi	r24, 0xF9	; 249
 570:	9e 4f       	sbci	r25, 0xFE	; 254
 572:	fc 01       	movw	r30, r24
 574:	80 81       	ld	r24, Z
 576:	28 23       	and	r18, r24
 578:	8b 81       	ldd	r24, Y+3	; 0x03
 57a:	9c 81       	ldd	r25, Y+4	; 0x04
 57c:	fc 01       	movw	r30, r24
 57e:	20 83       	st	Z, r18
 580:	16 c0       	rjmp	.+44     	; 0x5ae <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	88 31       	cpi	r24, 0x18	; 24
 586:	98 f0       	brcs	.+38     	; 0x5ae <DIO_u8ReadPinValue+0xd8>
 588:	8a 81       	ldd	r24, Y+2	; 0x02
 58a:	80 32       	cpi	r24, 0x20	; 32
 58c:	80 f4       	brcc	.+32     	; 0x5ae <DIO_u8ReadPinValue+0xd8>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PIND, copy_u8PinNB);
 58e:	80 e3       	ldi	r24, 0x30	; 48
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	fc 01       	movw	r30, r24
 594:	20 81       	ld	r18, Z
 596:	8a 81       	ldd	r24, Y+2	; 0x02
 598:	88 2f       	mov	r24, r24
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	89 5f       	subi	r24, 0xF9	; 249
 59e:	9e 4f       	sbci	r25, 0xFE	; 254
 5a0:	fc 01       	movw	r30, r24
 5a2:	80 81       	ld	r24, Z
 5a4:	28 23       	and	r18, r24
 5a6:	8b 81       	ldd	r24, Y+3	; 0x03
 5a8:	9c 81       	ldd	r25, Y+4	; 0x04
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 83       	st	Z, r18
		}
		local_u8Error = STD_ERROR_OK;
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	89 83       	std	Y+1, r24	; 0x01
 5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <DIO_u8ReadPinValue+0xe0>
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 5b4:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
 5b6:	89 81       	ldd	r24, Y+1	; 0x01
}
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

000005c6 <DIO_u8SetPortDirection>:
/*          -> Location (copy_u8Value)                        						*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPortDirection(u8 copy_u8PortNB, u8 copy_u8Direction)
{
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	00 d0       	rcall	.+0      	; 0x5cc <DIO_u8SetPortDirection+0x6>
 5cc:	0f 92       	push	r0
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
 5d2:	8a 83       	std	Y+2, r24	; 0x02
 5d4:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8PortNB < DIO_MAXPORTNB)
 5da:	8a 81       	ldd	r24, Y+2	; 0x02
 5dc:	84 30       	cpi	r24, 0x04	; 4
 5de:	08 f0       	brcs	.+2      	; 0x5e2 <DIO_u8SetPortDirection+0x1c>
 5e0:	57 c0       	rjmp	.+174    	; 0x690 <DIO_u8SetPortDirection+0xca>
	{
		switch(copy_u8Direction)
 5e2:	8b 81       	ldd	r24, Y+3	; 0x03
 5e4:	88 2f       	mov	r24, r24
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	00 97       	sbiw	r24, 0x00	; 0
 5ea:	21 f0       	breq	.+8      	; 0x5f4 <DIO_u8SetPortDirection+0x2e>
 5ec:	8f 3f       	cpi	r24, 0xFF	; 255
 5ee:	91 05       	cpc	r25, r1
 5f0:	09 f1       	breq	.+66     	; 0x634 <DIO_u8SetPortDirection+0x6e>
 5f2:	4b c0       	rjmp	.+150    	; 0x68a <DIO_u8SetPortDirection+0xc4>
		{
			case DIO_PORT_INPUT:
				if(copy_u8PortNB == DIO_PORTA)
 5f4:	8a 81       	ldd	r24, Y+2	; 0x02
 5f6:	88 23       	and	r24, r24
 5f8:	29 f4       	brne	.+10     	; 0x604 <DIO_u8SetPortDirection+0x3e>
				{
					DIO_Register_DDRA = RESET_PORT(DIO_Register_DDRA);
 5fa:	8a e3       	ldi	r24, 0x3A	; 58
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	fc 01       	movw	r30, r24
 600:	10 82       	st	Z, r1
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_DDRD = RESET_PORT(DIO_Register_DDRD);
				}
				break;
 602:	48 c0       	rjmp	.+144    	; 0x694 <DIO_u8SetPortDirection+0xce>
				else if(copy_u8PortNB == DIO_PORTB)
 604:	8a 81       	ldd	r24, Y+2	; 0x02
 606:	81 30       	cpi	r24, 0x01	; 1
 608:	29 f4       	brne	.+10     	; 0x614 <DIO_u8SetPortDirection+0x4e>
					DIO_Register_DDRB = RESET_PORT(DIO_Register_DDRB);
 60a:	87 e3       	ldi	r24, 0x37	; 55
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	fc 01       	movw	r30, r24
 610:	10 82       	st	Z, r1
				break;
 612:	40 c0       	rjmp	.+128    	; 0x694 <DIO_u8SetPortDirection+0xce>
				else if(copy_u8PortNB == DIO_PORTC)
 614:	8a 81       	ldd	r24, Y+2	; 0x02
 616:	82 30       	cpi	r24, 0x02	; 2
 618:	29 f4       	brne	.+10     	; 0x624 <DIO_u8SetPortDirection+0x5e>
					DIO_Register_DDRC = RESET_PORT(DIO_Register_DDRC);
 61a:	84 e3       	ldi	r24, 0x34	; 52
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	fc 01       	movw	r30, r24
 620:	10 82       	st	Z, r1
				break;
 622:	38 c0       	rjmp	.+112    	; 0x694 <DIO_u8SetPortDirection+0xce>
				else if(copy_u8PortNB == DIO_PORTD)
 624:	8a 81       	ldd	r24, Y+2	; 0x02
 626:	83 30       	cpi	r24, 0x03	; 3
 628:	a9 f5       	brne	.+106    	; 0x694 <DIO_u8SetPortDirection+0xce>
					DIO_Register_DDRD = RESET_PORT(DIO_Register_DDRD);
 62a:	81 e3       	ldi	r24, 0x31	; 49
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	fc 01       	movw	r30, r24
 630:	10 82       	st	Z, r1
				break;
 632:	30 c0       	rjmp	.+96     	; 0x694 <DIO_u8SetPortDirection+0xce>

			case DIO_PORT_OUTPUT:
				switch (copy_u8PortNB)
 634:	8a 81       	ldd	r24, Y+2	; 0x02
 636:	88 2f       	mov	r24, r24
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	91 05       	cpc	r25, r1
 63e:	91 f0       	breq	.+36     	; 0x664 <DIO_u8SetPortDirection+0x9e>
 640:	82 30       	cpi	r24, 0x02	; 2
 642:	91 05       	cpc	r25, r1
 644:	1c f4       	brge	.+6      	; 0x64c <DIO_u8SetPortDirection+0x86>
 646:	89 2b       	or	r24, r25
 648:	39 f0       	breq	.+14     	; 0x658 <DIO_u8SetPortDirection+0x92>
					break;
				case DIO_PORTD:
					DIO_Register_DDRD = SET_PORT(DIO_Register_DDRD);
					break;
				}
				break;
 64a:	25 c0       	rjmp	.+74     	; 0x696 <DIO_u8SetPortDirection+0xd0>
 64c:	82 30       	cpi	r24, 0x02	; 2
 64e:	91 05       	cpc	r25, r1
 650:	79 f0       	breq	.+30     	; 0x670 <DIO_u8SetPortDirection+0xaa>
 652:	03 97       	sbiw	r24, 0x03	; 3
 654:	99 f0       	breq	.+38     	; 0x67c <DIO_u8SetPortDirection+0xb6>
 656:	1f c0       	rjmp	.+62     	; 0x696 <DIO_u8SetPortDirection+0xd0>
					DIO_Register_DDRA = SET_PORT(DIO_Register_DDRA);
 658:	8a e3       	ldi	r24, 0x3A	; 58
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	2f ef       	ldi	r18, 0xFF	; 255
 65e:	fc 01       	movw	r30, r24
 660:	20 83       	st	Z, r18
					break;
 662:	12 c0       	rjmp	.+36     	; 0x688 <DIO_u8SetPortDirection+0xc2>
					DIO_Register_DDRB = SET_PORT(DIO_Register_DDRB);
 664:	87 e3       	ldi	r24, 0x37	; 55
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	2f ef       	ldi	r18, 0xFF	; 255
 66a:	fc 01       	movw	r30, r24
 66c:	20 83       	st	Z, r18
					break;
 66e:	0c c0       	rjmp	.+24     	; 0x688 <DIO_u8SetPortDirection+0xc2>
					DIO_Register_DDRC = SET_PORT(DIO_Register_DDRC);
 670:	84 e3       	ldi	r24, 0x34	; 52
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	2f ef       	ldi	r18, 0xFF	; 255
 676:	fc 01       	movw	r30, r24
 678:	20 83       	st	Z, r18
					break;
 67a:	06 c0       	rjmp	.+12     	; 0x688 <DIO_u8SetPortDirection+0xc2>
					DIO_Register_DDRD = SET_PORT(DIO_Register_DDRD);
 67c:	81 e3       	ldi	r24, 0x31	; 49
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	2f ef       	ldi	r18, 0xFF	; 255
 682:	fc 01       	movw	r30, r24
 684:	20 83       	st	Z, r18
					break;
 686:	00 00       	nop
				break;
 688:	06 c0       	rjmp	.+12     	; 0x696 <DIO_u8SetPortDirection+0xd0>
			default:
				local_u8Error = STD_ERROR_NOK;
 68a:	19 82       	std	Y+1, r1	; 0x01
				break;
 68c:	00 00       	nop
 68e:	03 c0       	rjmp	.+6      	; 0x696 <DIO_u8SetPortDirection+0xd0>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 690:	19 82       	std	Y+1, r1	; 0x01
 692:	01 c0       	rjmp	.+2      	; 0x696 <DIO_u8SetPortDirection+0xd0>
				break;
 694:	00 00       	nop
	}

	return local_u8Error;
 696:	89 81       	ldd	r24, Y+1	; 0x01
}
 698:	0f 90       	pop	r0
 69a:	0f 90       	pop	r0
 69c:	0f 90       	pop	r0
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	08 95       	ret

000006a4 <DIO_u8SetPortValue>:
/*          -> Value (copy_u8Value) (from 0x00 till 0xFF)                           */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPortValue(u8 copy_u8PortNB, u8 copy_pu8Value)
{
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	00 d0       	rcall	.+0      	; 0x6aa <DIO_u8SetPortValue+0x6>
 6aa:	0f 92       	push	r0
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	8a 83       	std	Y+2, r24	; 0x02
 6b2:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	89 83       	std	Y+1, r24	; 0x01

	if( copy_u8PortNB < DIO_MAXPORTNB )
 6b8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ba:	84 30       	cpi	r24, 0x04	; 4
 6bc:	08 f0       	brcs	.+2      	; 0x6c0 <DIO_u8SetPortValue+0x1c>
 6be:	7c c0       	rjmp	.+248    	; 0x7b8 <DIO_u8SetPortValue+0x114>
	{
		switch(copy_pu8Value)
 6c0:	8b 81       	ldd	r24, Y+3	; 0x03
 6c2:	88 2f       	mov	r24, r24
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	8f 3f       	cpi	r24, 0xFF	; 255
 6c8:	91 05       	cpc	r25, r1
 6ca:	3c f4       	brge	.+14     	; 0x6da <DIO_u8SetPortValue+0x36>
 6cc:	18 16       	cp	r1, r24
 6ce:	19 06       	cpc	r1, r25
 6d0:	0c f4       	brge	.+2      	; 0x6d4 <DIO_u8SetPortValue+0x30>
 6d2:	4c c0       	rjmp	.+152    	; 0x76c <DIO_u8SetPortValue+0xc8>
 6d4:	89 2b       	or	r24, r25
 6d6:	29 f0       	breq	.+10     	; 0x6e2 <DIO_u8SetPortValue+0x3e>
 6d8:	6d c0       	rjmp	.+218    	; 0x7b4 <DIO_u8SetPortValue+0x110>
 6da:	8f 3f       	cpi	r24, 0xFF	; 255
 6dc:	91 05       	cpc	r25, r1
 6de:	11 f1       	breq	.+68     	; 0x724 <DIO_u8SetPortValue+0x80>
 6e0:	69 c0       	rjmp	.+210    	; 0x7b4 <DIO_u8SetPortValue+0x110>
		{
			case DIO_PORT_LOW:
				if(copy_u8PortNB == DIO_PORTA)
 6e2:	8a 81       	ldd	r24, Y+2	; 0x02
 6e4:	88 23       	and	r24, r24
 6e6:	29 f4       	brne	.+10     	; 0x6f2 <DIO_u8SetPortValue+0x4e>
				{
					DIO_Register_PORTA = RESET_PORT(DIO_Register_PORTA);
 6e8:	8b e3       	ldi	r24, 0x3B	; 59
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	fc 01       	movw	r30, r24
 6ee:	10 82       	st	Z, r1
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_PORTD = RESET_PORT(DIO_Register_PORTD);
				}
				break;
 6f0:	65 c0       	rjmp	.+202    	; 0x7bc <DIO_u8SetPortValue+0x118>
				else if(copy_u8PortNB == DIO_PORTB)
 6f2:	8a 81       	ldd	r24, Y+2	; 0x02
 6f4:	81 30       	cpi	r24, 0x01	; 1
 6f6:	29 f4       	brne	.+10     	; 0x702 <DIO_u8SetPortValue+0x5e>
					DIO_Register_PORTB = RESET_PORT(DIO_Register_PORTB);
 6f8:	88 e3       	ldi	r24, 0x38	; 56
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	fc 01       	movw	r30, r24
 6fe:	10 82       	st	Z, r1
				break;
 700:	5d c0       	rjmp	.+186    	; 0x7bc <DIO_u8SetPortValue+0x118>
				else if(copy_u8PortNB == DIO_PORTC)
 702:	8a 81       	ldd	r24, Y+2	; 0x02
 704:	82 30       	cpi	r24, 0x02	; 2
 706:	29 f4       	brne	.+10     	; 0x712 <DIO_u8SetPortValue+0x6e>
					DIO_Register_PORTC = RESET_PORT(DIO_Register_PORTC);
 708:	85 e3       	ldi	r24, 0x35	; 53
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	fc 01       	movw	r30, r24
 70e:	10 82       	st	Z, r1
				break;
 710:	55 c0       	rjmp	.+170    	; 0x7bc <DIO_u8SetPortValue+0x118>
				else if(copy_u8PortNB == DIO_PORTD)
 712:	8a 81       	ldd	r24, Y+2	; 0x02
 714:	83 30       	cpi	r24, 0x03	; 3
 716:	09 f0       	breq	.+2      	; 0x71a <DIO_u8SetPortValue+0x76>
 718:	51 c0       	rjmp	.+162    	; 0x7bc <DIO_u8SetPortValue+0x118>
					DIO_Register_PORTD = RESET_PORT(DIO_Register_PORTD);
 71a:	82 e3       	ldi	r24, 0x32	; 50
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	fc 01       	movw	r30, r24
 720:	10 82       	st	Z, r1
				break;
 722:	4c c0       	rjmp	.+152    	; 0x7bc <DIO_u8SetPortValue+0x118>

			case DIO_PORT_OUTPUT:
				if(copy_u8PortNB == DIO_PORTA)
 724:	8a 81       	ldd	r24, Y+2	; 0x02
 726:	88 23       	and	r24, r24
 728:	31 f4       	brne	.+12     	; 0x736 <DIO_u8SetPortValue+0x92>
				{
					DIO_Register_PORTA = SET_PORT(DIO_Register_PORTA);
 72a:	8b e3       	ldi	r24, 0x3B	; 59
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	2f ef       	ldi	r18, 0xFF	; 255
 730:	fc 01       	movw	r30, r24
 732:	20 83       	st	Z, r18
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_PORTD = SET_PORT(DIO_Register_PORTD);
				}
				break;
 734:	45 c0       	rjmp	.+138    	; 0x7c0 <DIO_u8SetPortValue+0x11c>
				else if(copy_u8PortNB == DIO_PORTB)
 736:	8a 81       	ldd	r24, Y+2	; 0x02
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	31 f4       	brne	.+12     	; 0x748 <DIO_u8SetPortValue+0xa4>
					DIO_Register_PORTB = SET_PORT(DIO_Register_PORTB);
 73c:	88 e3       	ldi	r24, 0x38	; 56
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	2f ef       	ldi	r18, 0xFF	; 255
 742:	fc 01       	movw	r30, r24
 744:	20 83       	st	Z, r18
				break;
 746:	3c c0       	rjmp	.+120    	; 0x7c0 <DIO_u8SetPortValue+0x11c>
				else if(copy_u8PortNB == DIO_PORTC)
 748:	8a 81       	ldd	r24, Y+2	; 0x02
 74a:	82 30       	cpi	r24, 0x02	; 2
 74c:	31 f4       	brne	.+12     	; 0x75a <DIO_u8SetPortValue+0xb6>
					DIO_Register_PORTC = SET_PORT(DIO_Register_PORTC);
 74e:	85 e3       	ldi	r24, 0x35	; 53
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	2f ef       	ldi	r18, 0xFF	; 255
 754:	fc 01       	movw	r30, r24
 756:	20 83       	st	Z, r18
				break;
 758:	33 c0       	rjmp	.+102    	; 0x7c0 <DIO_u8SetPortValue+0x11c>
				else if(copy_u8PortNB == DIO_PORTD)
 75a:	8a 81       	ldd	r24, Y+2	; 0x02
 75c:	83 30       	cpi	r24, 0x03	; 3
 75e:	81 f5       	brne	.+96     	; 0x7c0 <DIO_u8SetPortValue+0x11c>
					DIO_Register_PORTD = SET_PORT(DIO_Register_PORTD);
 760:	82 e3       	ldi	r24, 0x32	; 50
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	2f ef       	ldi	r18, 0xFF	; 255
 766:	fc 01       	movw	r30, r24
 768:	20 83       	st	Z, r18
				break;
 76a:	2a c0       	rjmp	.+84     	; 0x7c0 <DIO_u8SetPortValue+0x11c>

			case DIO_BYTE_VALUE_RANGE:
				if(copy_u8PortNB == DIO_PORTA)
 76c:	8a 81       	ldd	r24, Y+2	; 0x02
 76e:	88 23       	and	r24, r24
 770:	31 f4       	brne	.+12     	; 0x77e <DIO_u8SetPortValue+0xda>
				{
					DIO_Register_PORTA = ASSIGN_PORT(DIO_Register_PORTA, copy_pu8Value);
 772:	8b e3       	ldi	r24, 0x3B	; 59
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	2b 81       	ldd	r18, Y+3	; 0x03
 778:	fc 01       	movw	r30, r24
 77a:	20 83       	st	Z, r18
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_PORTD = ASSIGN_PORT(DIO_Register_PORTD, copy_pu8Value);
				}
				break;
 77c:	23 c0       	rjmp	.+70     	; 0x7c4 <DIO_u8SetPortValue+0x120>
				else if(copy_u8PortNB == DIO_PORTB)
 77e:	8a 81       	ldd	r24, Y+2	; 0x02
 780:	81 30       	cpi	r24, 0x01	; 1
 782:	31 f4       	brne	.+12     	; 0x790 <DIO_u8SetPortValue+0xec>
					DIO_Register_PORTB = ASSIGN_PORT(DIO_Register_PORTB, copy_pu8Value);
 784:	88 e3       	ldi	r24, 0x38	; 56
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	2b 81       	ldd	r18, Y+3	; 0x03
 78a:	fc 01       	movw	r30, r24
 78c:	20 83       	st	Z, r18
				break;
 78e:	1a c0       	rjmp	.+52     	; 0x7c4 <DIO_u8SetPortValue+0x120>
				else if(copy_u8PortNB == DIO_PORTC)
 790:	8a 81       	ldd	r24, Y+2	; 0x02
 792:	82 30       	cpi	r24, 0x02	; 2
 794:	31 f4       	brne	.+12     	; 0x7a2 <DIO_u8SetPortValue+0xfe>
					DIO_Register_PORTC = ASSIGN_PORT(DIO_Register_PORTC, copy_pu8Value);
 796:	85 e3       	ldi	r24, 0x35	; 53
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	2b 81       	ldd	r18, Y+3	; 0x03
 79c:	fc 01       	movw	r30, r24
 79e:	20 83       	st	Z, r18
				break;
 7a0:	11 c0       	rjmp	.+34     	; 0x7c4 <DIO_u8SetPortValue+0x120>
				else if(copy_u8PortNB == DIO_PORTD)
 7a2:	8a 81       	ldd	r24, Y+2	; 0x02
 7a4:	83 30       	cpi	r24, 0x03	; 3
 7a6:	71 f4       	brne	.+28     	; 0x7c4 <DIO_u8SetPortValue+0x120>
					DIO_Register_PORTD = ASSIGN_PORT(DIO_Register_PORTD, copy_pu8Value);
 7a8:	82 e3       	ldi	r24, 0x32	; 50
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	2b 81       	ldd	r18, Y+3	; 0x03
 7ae:	fc 01       	movw	r30, r24
 7b0:	20 83       	st	Z, r18
				break;
 7b2:	08 c0       	rjmp	.+16     	; 0x7c4 <DIO_u8SetPortValue+0x120>
			default:
				local_u8Error = STD_ERROR_NOK;
 7b4:	19 82       	std	Y+1, r1	; 0x01
 7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <DIO_u8SetPortValue+0x122>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 7b8:	19 82       	std	Y+1, r1	; 0x01
 7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <DIO_u8SetPortValue+0x122>
				break;
 7bc:	00 00       	nop
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <DIO_u8SetPortValue+0x122>
				break;
 7c0:	00 00       	nop
 7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <DIO_u8SetPortValue+0x122>
				break;
 7c4:	00 00       	nop
	}

	return local_u8Error;
 7c6:	89 81       	ldd	r24, Y+1	; 0x01
}
 7c8:	0f 90       	pop	r0
 7ca:	0f 90       	pop	r0
 7cc:	0f 90       	pop	r0
 7ce:	df 91       	pop	r29
 7d0:	cf 91       	pop	r28
 7d2:	08 95       	ret

000007d4 <DIO_u8ReadPortValue>:
/*          -> Location (* copy_pu8Value)                                           */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8ReadPortValue(u8 copy_u8PortNB, u8 * copy_pu8Value)
{
 7d4:	cf 93       	push	r28
 7d6:	df 93       	push	r29
 7d8:	00 d0       	rcall	.+0      	; 0x7da <DIO_u8ReadPortValue+0x6>
 7da:	00 d0       	rcall	.+0      	; 0x7dc <DIO_u8ReadPortValue+0x8>
 7dc:	cd b7       	in	r28, 0x3d	; 61
 7de:	de b7       	in	r29, 0x3e	; 62
 7e0:	8a 83       	std	Y+2, r24	; 0x02
 7e2:	7c 83       	std	Y+4, r23	; 0x04
 7e4:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PortNB < DIO_MAXPINNB) && (copy_pu8Value != NULL))
 7ea:	8a 81       	ldd	r24, Y+2	; 0x02
 7ec:	80 32       	cpi	r24, 0x20	; 32
 7ee:	b0 f5       	brcc	.+108    	; 0x85c <DIO_u8ReadPortValue+0x88>
 7f0:	8b 81       	ldd	r24, Y+3	; 0x03
 7f2:	9c 81       	ldd	r25, Y+4	; 0x04
 7f4:	89 2b       	or	r24, r25
 7f6:	91 f1       	breq	.+100    	; 0x85c <DIO_u8ReadPortValue+0x88>
		{
			if(copy_u8PortNB == DIO_PORTA)
 7f8:	8a 81       	ldd	r24, Y+2	; 0x02
 7fa:	88 23       	and	r24, r24
 7fc:	49 f4       	brne	.+18     	; 0x810 <DIO_u8ReadPortValue+0x3c>
			{
				GET_PORT(DIO_Register_PINA, * copy_pu8Value);
 7fe:	89 e3       	ldi	r24, 0x39	; 57
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	fc 01       	movw	r30, r24
 804:	20 81       	ld	r18, Z
 806:	8b 81       	ldd	r24, Y+3	; 0x03
 808:	9c 81       	ldd	r25, Y+4	; 0x04
 80a:	fc 01       	movw	r30, r24
 80c:	20 83       	st	Z, r18
 80e:	23 c0       	rjmp	.+70     	; 0x856 <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTB)
 810:	8a 81       	ldd	r24, Y+2	; 0x02
 812:	81 30       	cpi	r24, 0x01	; 1
 814:	49 f4       	brne	.+18     	; 0x828 <DIO_u8ReadPortValue+0x54>
			{
				GET_PORT(DIO_Register_PINB, * copy_pu8Value);
 816:	86 e3       	ldi	r24, 0x36	; 54
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	fc 01       	movw	r30, r24
 81c:	20 81       	ld	r18, Z
 81e:	8b 81       	ldd	r24, Y+3	; 0x03
 820:	9c 81       	ldd	r25, Y+4	; 0x04
 822:	fc 01       	movw	r30, r24
 824:	20 83       	st	Z, r18
 826:	17 c0       	rjmp	.+46     	; 0x856 <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTC)
 828:	8a 81       	ldd	r24, Y+2	; 0x02
 82a:	82 30       	cpi	r24, 0x02	; 2
 82c:	49 f4       	brne	.+18     	; 0x840 <DIO_u8ReadPortValue+0x6c>
			{
				GET_PORT(DIO_Register_PINC, * copy_pu8Value);
 82e:	83 e3       	ldi	r24, 0x33	; 51
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	fc 01       	movw	r30, r24
 834:	20 81       	ld	r18, Z
 836:	8b 81       	ldd	r24, Y+3	; 0x03
 838:	9c 81       	ldd	r25, Y+4	; 0x04
 83a:	fc 01       	movw	r30, r24
 83c:	20 83       	st	Z, r18
 83e:	0b c0       	rjmp	.+22     	; 0x856 <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTA)
 840:	8a 81       	ldd	r24, Y+2	; 0x02
 842:	88 23       	and	r24, r24
 844:	41 f4       	brne	.+16     	; 0x856 <DIO_u8ReadPortValue+0x82>
			{
				GET_PORT(DIO_Register_PIND, * copy_pu8Value);
 846:	80 e3       	ldi	r24, 0x30	; 48
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	fc 01       	movw	r30, r24
 84c:	20 81       	ld	r18, Z
 84e:	8b 81       	ldd	r24, Y+3	; 0x03
 850:	9c 81       	ldd	r25, Y+4	; 0x04
 852:	fc 01       	movw	r30, r24
 854:	20 83       	st	Z, r18
			}
			local_u8Error = STD_ERROR_OK;
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	89 83       	std	Y+1, r24	; 0x01
 85a:	01 c0       	rjmp	.+2      	; 0x85e <DIO_u8ReadPortValue+0x8a>
		}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 85c:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
 85e:	89 81       	ldd	r24, Y+1	; 0x01
}
 860:	0f 90       	pop	r0
 862:	0f 90       	pop	r0
 864:	0f 90       	pop	r0
 866:	0f 90       	pop	r0
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	08 95       	ret

0000086e <Lib_vDelayMs>:
/*  input 		-> Time value of delay -> copy_u16time              */
/*  output		-> N/A											    */
/********************************************************************/

void Lib_vDelayMs(u16 copy_u16time)
{
 86e:	cf 93       	push	r28
 870:	df 93       	push	r29
 872:	cd b7       	in	r28, 0x3d	; 61
 874:	de b7       	in	r29, 0x3e	; 62
 876:	2a 97       	sbiw	r28, 0x0a	; 10
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	f8 94       	cli
 87c:	de bf       	out	0x3e, r29	; 62
 87e:	0f be       	out	0x3f, r0	; 63
 880:	cd bf       	out	0x3d, r28	; 61
 882:	9a 87       	std	Y+10, r25	; 0x0a
 884:	89 87       	std	Y+9, r24	; 0x09
	u32 Local_CountNumber;
	/*--------------------------------------------------------------*/

	/*----------------------main implementation---------------------*/

	for (Local_CountNumber=NULL; Local_CountNumber < copy_u16time ; Local_CountNumber++)
 886:	1d 82       	std	Y+5, r1	; 0x05
 888:	1e 82       	std	Y+6, r1	; 0x06
 88a:	1f 82       	std	Y+7, r1	; 0x07
 88c:	18 86       	std	Y+8, r1	; 0x08
 88e:	28 c0       	rjmp	.+80     	; 0x8e0 <Lib_vDelayMs+0x72>
		/*----------------------------------------------------------*/
		/* outer loop which runs multiple of 1ms					*/
		/* -> lower limit: 0										*/
		/* -> upper limit: copy_u16time 						    */
		/*----------------------------------------------------------*/
		for(Local_InsideLoopCounter = NULL; Local_InsideLoopCounter < LIB_U8_UPPER_THRESHOLD ; Local_InsideLoopCounter++)
 890:	19 82       	std	Y+1, r1	; 0x01
 892:	1a 82       	std	Y+2, r1	; 0x02
 894:	1b 82       	std	Y+3, r1	; 0x03
 896:	1c 82       	std	Y+4, r1	; 0x04
 898:	0f c0       	rjmp	.+30     	; 0x8b8 <Lib_vDelayMs+0x4a>
	...
 8a2:	89 81       	ldd	r24, Y+1	; 0x01
 8a4:	9a 81       	ldd	r25, Y+2	; 0x02
 8a6:	ab 81       	ldd	r26, Y+3	; 0x03
 8a8:	bc 81       	ldd	r27, Y+4	; 0x04
 8aa:	01 96       	adiw	r24, 0x01	; 1
 8ac:	a1 1d       	adc	r26, r1
 8ae:	b1 1d       	adc	r27, r1
 8b0:	89 83       	std	Y+1, r24	; 0x01
 8b2:	9a 83       	std	Y+2, r25	; 0x02
 8b4:	ab 83       	std	Y+3, r26	; 0x03
 8b6:	bc 83       	std	Y+4, r27	; 0x04
 8b8:	89 81       	ldd	r24, Y+1	; 0x01
 8ba:	9a 81       	ldd	r25, Y+2	; 0x02
 8bc:	ab 81       	ldd	r26, Y+3	; 0x03
 8be:	bc 81       	ldd	r27, Y+4	; 0x04
 8c0:	80 3d       	cpi	r24, 0xD0	; 208
 8c2:	91 05       	cpc	r25, r1
 8c4:	a1 05       	cpc	r26, r1
 8c6:	b1 05       	cpc	r27, r1
 8c8:	40 f3       	brcs	.-48     	; 0x89a <Lib_vDelayMs+0x2c>
	for (Local_CountNumber=NULL; Local_CountNumber < copy_u16time ; Local_CountNumber++)
 8ca:	8d 81       	ldd	r24, Y+5	; 0x05
 8cc:	9e 81       	ldd	r25, Y+6	; 0x06
 8ce:	af 81       	ldd	r26, Y+7	; 0x07
 8d0:	b8 85       	ldd	r27, Y+8	; 0x08
 8d2:	01 96       	adiw	r24, 0x01	; 1
 8d4:	a1 1d       	adc	r26, r1
 8d6:	b1 1d       	adc	r27, r1
 8d8:	8d 83       	std	Y+5, r24	; 0x05
 8da:	9e 83       	std	Y+6, r25	; 0x06
 8dc:	af 83       	std	Y+7, r26	; 0x07
 8de:	b8 87       	std	Y+8, r27	; 0x08
 8e0:	89 85       	ldd	r24, Y+9	; 0x09
 8e2:	9a 85       	ldd	r25, Y+10	; 0x0a
 8e4:	cc 01       	movw	r24, r24
 8e6:	a0 e0       	ldi	r26, 0x00	; 0
 8e8:	b0 e0       	ldi	r27, 0x00	; 0
 8ea:	2d 81       	ldd	r18, Y+5	; 0x05
 8ec:	3e 81       	ldd	r19, Y+6	; 0x06
 8ee:	4f 81       	ldd	r20, Y+7	; 0x07
 8f0:	58 85       	ldd	r21, Y+8	; 0x08
 8f2:	28 17       	cp	r18, r24
 8f4:	39 07       	cpc	r19, r25
 8f6:	4a 07       	cpc	r20, r26
 8f8:	5b 07       	cpc	r21, r27
 8fa:	50 f2       	brcs	.-108    	; 0x890 <Lib_vDelayMs+0x22>
			asm("nop");
			asm("nop");
		}
	}

}
 8fc:	00 00       	nop
 8fe:	2a 96       	adiw	r28, 0x0a	; 10
 900:	0f b6       	in	r0, 0x3f	; 63
 902:	f8 94       	cli
 904:	de bf       	out	0x3e, r29	; 62
 906:	0f be       	out	0x3f, r0	; 63
 908:	cd bf       	out	0x3d, r28	; 61
 90a:	df 91       	pop	r29
 90c:	cf 91       	pop	r28
 90e:	08 95       	ret

00000910 <Lib_vDelayUs>:
/*				 the given input value of time in microseconds  */
/*  input 		-> Time value of delay                          */
/*  output		-> N/A											*/
/****************************************************************/
void Lib_vDelayUs(u16 copy_u16time)
{
 910:	cf 93       	push	r28
 912:	df 93       	push	r29
 914:	00 d0       	rcall	.+0      	; 0x916 <Lib_vDelayUs+0x6>
 916:	00 d0       	rcall	.+0      	; 0x918 <Lib_vDelayUs+0x8>
 918:	cd b7       	in	r28, 0x3d	; 61
 91a:	de b7       	in	r29, 0x3e	; 62
 91c:	9c 83       	std	Y+4, r25	; 0x04
 91e:	8b 83       	std	Y+3, r24	; 0x03
	/* this formula is used to calculate T1, T2, T3, then       */
	/* then calculate the number of iterations needed to 		*/
	/* generate the required delay in microseconds              */
	/*----------------------------------------------------------*/

	u16 local_CountNumber = (copy_u16time - LIB_U8_TOTAL_CALCULATED) / LIB_U8_AVG_TIME_PER_ITERATION;
 920:	8b 81       	ldd	r24, Y+3	; 0x03
 922:	9c 81       	ldd	r25, Y+4	; 0x04
 924:	45 97       	sbiw	r24, 0x15	; 21
 926:	9c 01       	movw	r18, r24
 928:	a9 e8       	ldi	r26, 0x89	; 137
 92a:	b8 e8       	ldi	r27, 0x88	; 136
 92c:	0e 94 3c 07 	call	0xe78	; 0xe78 <__umulhisi3>
 930:	96 95       	lsr	r25
 932:	87 95       	ror	r24
 934:	96 95       	lsr	r25
 936:	87 95       	ror	r24
 938:	96 95       	lsr	r25
 93a:	87 95       	ror	r24
 93c:	9a 83       	std	Y+2, r25	; 0x02
 93e:	89 83       	std	Y+1, r24	; 0x01

	for(;local_CountNumber > NULL; local_CountNumber--)
 940:	06 c0       	rjmp	.+12     	; 0x94e <Lib_vDelayUs+0x3e>
	{
			asm("nop");
 942:	00 00       	nop
	for(;local_CountNumber > NULL; local_CountNumber--)
 944:	89 81       	ldd	r24, Y+1	; 0x01
 946:	9a 81       	ldd	r25, Y+2	; 0x02
 948:	01 97       	sbiw	r24, 0x01	; 1
 94a:	9a 83       	std	Y+2, r25	; 0x02
 94c:	89 83       	std	Y+1, r24	; 0x01
 94e:	89 81       	ldd	r24, Y+1	; 0x01
 950:	9a 81       	ldd	r25, Y+2	; 0x02
 952:	89 2b       	or	r24, r25
 954:	b1 f7       	brne	.-20     	; 0x942 <Lib_vDelayUs+0x32>
	}
}
 956:	00 00       	nop
 958:	0f 90       	pop	r0
 95a:	0f 90       	pop	r0
 95c:	0f 90       	pop	r0
 95e:	0f 90       	pop	r0
 960:	df 91       	pop	r29
 962:	cf 91       	pop	r28
 964:	08 95       	ret

00000966 <SSD_u8SetValue>:
 * output: the Error state of the function
*/


u8 SSD_u8SetValue(u8 copy_SSD_ModuleNum, u8 copy_SSD_ModuleValue)
{
 966:	cf 93       	push	r28
 968:	df 93       	push	r29
 96a:	00 d0       	rcall	.+0      	; 0x96c <SSD_u8SetValue+0x6>
 96c:	00 d0       	rcall	.+0      	; 0x96e <SSD_u8SetValue+0x8>
 96e:	0f 92       	push	r0
 970:	cd b7       	in	r28, 0x3d	; 61
 972:	de b7       	in	r29, 0x3e	; 62
 974:	8c 83       	std	Y+4, r24	; 0x04
 976:	6d 83       	std	Y+5, r22	; 0x05


	/*Local Variable holding the error state*/
	u8 Local_u8Error;

	if ((copy_SSD_ModuleNum >= SSD_NO_OF_SSDs) || (copy_SSD_ModuleValue > SSD_MAX_DIGIT_FOR_SSD))
 978:	8c 81       	ldd	r24, Y+4	; 0x04
 97a:	83 30       	cpi	r24, 0x03	; 3
 97c:	18 f4       	brcc	.+6      	; 0x984 <SSD_u8SetValue+0x1e>
 97e:	8d 81       	ldd	r24, Y+5	; 0x05
 980:	8a 30       	cpi	r24, 0x0A	; 10
 982:	10 f0       	brcs	.+4      	; 0x988 <SSD_u8SetValue+0x22>
	{
		Local_u8Error = STD_ERROR_NOK;
 984:	19 82       	std	Y+1, r1	; 0x01
 986:	a7 c0       	rjmp	.+334    	; 0xad6 <SSD_u8SetValue+0x170>
	}
	else
	{
		if (SSD_u8OffFlag[copy_SSD_ModuleNum] == SSD_u8_SSD_SET_OFF_FLAG_OFF)
 988:	8c 81       	ldd	r24, Y+4	; 0x04
 98a:	88 2f       	mov	r24, r24
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	87 5e       	subi	r24, 0xE7	; 231
 990:	9e 4f       	sbci	r25, 0xFE	; 254
 992:	fc 01       	movw	r30, r24
 994:	80 81       	ld	r24, Z
 996:	88 23       	and	r24, r24
 998:	09 f0       	breq	.+2      	; 0x99c <SSD_u8SetValue+0x36>
 99a:	9b c0       	rjmp	.+310    	; 0xad2 <SSD_u8SetValue+0x16c>
		{
			SSD_Au8INIT_FLAG[copy_SSD_ModuleNum] = SSD_u8_SSD_INIT_FLAG_ONE;
 99c:	8c 81       	ldd	r24, Y+4	; 0x04
 99e:	88 2f       	mov	r24, r24
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	8d 5e       	subi	r24, 0xED	; 237
 9a4:	9e 4f       	sbci	r25, 0xFE	; 254
 9a6:	21 e0       	ldi	r18, 0x01	; 1
 9a8:	fc 01       	movw	r30, r24
 9aa:	20 83       	st	Z, r18
			SSD_u8LastDigit[copy_SSD_ModuleNum] = copy_SSD_ModuleValue;
 9ac:	8c 81       	ldd	r24, Y+4	; 0x04
 9ae:	88 2f       	mov	r24, r24
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	8a 5e       	subi	r24, 0xEA	; 234
 9b4:	9e 4f       	sbci	r25, 0xFE	; 254
 9b6:	2d 81       	ldd	r18, Y+5	; 0x05
 9b8:	fc 01       	movw	r30, r24
 9ba:	20 83       	st	Z, r18

			/*Checking whether the passed SSD number is related to Common Cathode SSD*/
			if (SSD_Au8ModuleType[copy_SSD_ModuleNum] == SSD_COMMON_CATHODE)
 9bc:	8c 81       	ldd	r24, Y+4	; 0x04
 9be:	88 2f       	mov	r24, r24
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	80 5f       	subi	r24, 0xF0	; 240
 9c4:	9e 4f       	sbci	r25, 0xFE	; 254
 9c6:	fc 01       	movw	r30, r24
 9c8:	80 81       	ld	r24, Z
 9ca:	88 23       	and	r24, r24
 9cc:	09 f0       	breq	.+2      	; 0x9d0 <SSD_u8SetValue+0x6a>
 9ce:	41 c0       	rjmp	.+130    	; 0xa52 <SSD_u8SetValue+0xec>
			{
				  /*handling the enable pin according to the cathode SSD */
				  Local_u8Error = DIO_u8SetPinValue(SSD_Au8ModuleEnable[copy_SSD_ModuleNum],DIO_PIN_LOW);
 9d0:	8c 81       	ldd	r24, Y+4	; 0x04
 9d2:	88 2f       	mov	r24, r24
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	8f 5f       	subi	r24, 0xFF	; 255
 9d8:	9e 4f       	sbci	r25, 0xFE	; 254
 9da:	fc 01       	movw	r30, r24
 9dc:	80 81       	ld	r24, Z
 9de:	60 e0       	ldi	r22, 0x00	; 0
 9e0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8SetPinValue>
 9e4:	89 83       	std	Y+1, r24	; 0x01
				  for (u8 i = SSD_u8_INIT_ITER ; i < SSD_NUMBER_OF_SEGMENTS; i++)
 9e6:	1a 82       	std	Y+2, r1	; 0x02
 9e8:	30 c0       	rjmp	.+96     	; 0xa4a <SSD_u8SetValue+0xe4>
				  {
					  Local_u8Error = DIO_u8SetPinValue(SSD_Au8Segments[copy_SSD_ModuleNum][i],SSD_Au8SEG_PATTERN_CATHODE[copy_SSD_ModuleValue][i]);
 9ea:	8d 81       	ldd	r24, Y+5	; 0x05
 9ec:	28 2f       	mov	r18, r24
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	8a 81       	ldd	r24, Y+2	; 0x02
 9f2:	48 2f       	mov	r20, r24
 9f4:	50 e0       	ldi	r21, 0x00	; 0
 9f6:	c9 01       	movw	r24, r18
 9f8:	88 0f       	add	r24, r24
 9fa:	99 1f       	adc	r25, r25
 9fc:	88 0f       	add	r24, r24
 9fe:	99 1f       	adc	r25, r25
 a00:	88 0f       	add	r24, r24
 a02:	99 1f       	adc	r25, r25
 a04:	82 1b       	sub	r24, r18
 a06:	93 0b       	sbc	r25, r19
 a08:	84 0f       	add	r24, r20
 a0a:	95 1f       	adc	r25, r21
 a0c:	80 5a       	subi	r24, 0xA0	; 160
 a0e:	9f 4f       	sbci	r25, 0xFF	; 255
 a10:	fc 01       	movw	r30, r24
 a12:	60 81       	ld	r22, Z
 a14:	8c 81       	ldd	r24, Y+4	; 0x04
 a16:	28 2f       	mov	r18, r24
 a18:	30 e0       	ldi	r19, 0x00	; 0
 a1a:	8a 81       	ldd	r24, Y+2	; 0x02
 a1c:	48 2f       	mov	r20, r24
 a1e:	50 e0       	ldi	r21, 0x00	; 0
 a20:	c9 01       	movw	r24, r18
 a22:	88 0f       	add	r24, r24
 a24:	99 1f       	adc	r25, r25
 a26:	88 0f       	add	r24, r24
 a28:	99 1f       	adc	r25, r25
 a2a:	88 0f       	add	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	82 1b       	sub	r24, r18
 a30:	93 0b       	sbc	r25, r19
 a32:	84 0f       	add	r24, r20
 a34:	95 1f       	adc	r25, r21
 a36:	84 51       	subi	r24, 0x14	; 20
 a38:	9f 4f       	sbci	r25, 0xFF	; 255
 a3a:	fc 01       	movw	r30, r24
 a3c:	80 81       	ld	r24, Z
 a3e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8SetPinValue>
 a42:	89 83       	std	Y+1, r24	; 0x01
				  for (u8 i = SSD_u8_INIT_ITER ; i < SSD_NUMBER_OF_SEGMENTS; i++)
 a44:	8a 81       	ldd	r24, Y+2	; 0x02
 a46:	8f 5f       	subi	r24, 0xFF	; 255
 a48:	8a 83       	std	Y+2, r24	; 0x02
 a4a:	8a 81       	ldd	r24, Y+2	; 0x02
 a4c:	87 30       	cpi	r24, 0x07	; 7
 a4e:	68 f2       	brcs	.-102    	; 0x9ea <SSD_u8SetValue+0x84>
 a50:	42 c0       	rjmp	.+132    	; 0xad6 <SSD_u8SetValue+0x170>
				  }
			}
			else
			{
				  /*handling the enable pin according to the anode SSD */
				  DIO_u8SetPinValue(SSD_Au8ModuleEnable[copy_SSD_ModuleNum],DIO_PIN_HIGH);
 a52:	8c 81       	ldd	r24, Y+4	; 0x04
 a54:	88 2f       	mov	r24, r24
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	8f 5f       	subi	r24, 0xFF	; 255
 a5a:	9e 4f       	sbci	r25, 0xFE	; 254
 a5c:	fc 01       	movw	r30, r24
 a5e:	80 81       	ld	r24, Z
 a60:	61 e0       	ldi	r22, 0x01	; 1
 a62:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8SetPinValue>
				  for (u8 i = SSD_u8_INIT_ITER ; i < SSD_NUMBER_OF_SEGMENTS; i++)
 a66:	1b 82       	std	Y+3, r1	; 0x03
 a68:	30 c0       	rjmp	.+96     	; 0xaca <SSD_u8SetValue+0x164>
				  {
					  Local_u8Error = DIO_u8SetPinValue(SSD_Au8Segments[copy_SSD_ModuleNum][i],SSD_Au8SEG_PATTERN_ANODE[copy_SSD_ModuleValue][i]);
 a6a:	8d 81       	ldd	r24, Y+5	; 0x05
 a6c:	28 2f       	mov	r18, r24
 a6e:	30 e0       	ldi	r19, 0x00	; 0
 a70:	8b 81       	ldd	r24, Y+3	; 0x03
 a72:	48 2f       	mov	r20, r24
 a74:	50 e0       	ldi	r21, 0x00	; 0
 a76:	c9 01       	movw	r24, r18
 a78:	88 0f       	add	r24, r24
 a7a:	99 1f       	adc	r25, r25
 a7c:	88 0f       	add	r24, r24
 a7e:	99 1f       	adc	r25, r25
 a80:	88 0f       	add	r24, r24
 a82:	99 1f       	adc	r25, r25
 a84:	82 1b       	sub	r24, r18
 a86:	93 0b       	sbc	r25, r19
 a88:	84 0f       	add	r24, r20
 a8a:	95 1f       	adc	r25, r21
 a8c:	8a 55       	subi	r24, 0x5A	; 90
 a8e:	9f 4f       	sbci	r25, 0xFF	; 255
 a90:	fc 01       	movw	r30, r24
 a92:	60 81       	ld	r22, Z
 a94:	8c 81       	ldd	r24, Y+4	; 0x04
 a96:	28 2f       	mov	r18, r24
 a98:	30 e0       	ldi	r19, 0x00	; 0
 a9a:	8b 81       	ldd	r24, Y+3	; 0x03
 a9c:	48 2f       	mov	r20, r24
 a9e:	50 e0       	ldi	r21, 0x00	; 0
 aa0:	c9 01       	movw	r24, r18
 aa2:	88 0f       	add	r24, r24
 aa4:	99 1f       	adc	r25, r25
 aa6:	88 0f       	add	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	88 0f       	add	r24, r24
 aac:	99 1f       	adc	r25, r25
 aae:	82 1b       	sub	r24, r18
 ab0:	93 0b       	sbc	r25, r19
 ab2:	84 0f       	add	r24, r20
 ab4:	95 1f       	adc	r25, r21
 ab6:	84 51       	subi	r24, 0x14	; 20
 ab8:	9f 4f       	sbci	r25, 0xFF	; 255
 aba:	fc 01       	movw	r30, r24
 abc:	80 81       	ld	r24, Z
 abe:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8SetPinValue>
 ac2:	89 83       	std	Y+1, r24	; 0x01
				  for (u8 i = SSD_u8_INIT_ITER ; i < SSD_NUMBER_OF_SEGMENTS; i++)
 ac4:	8b 81       	ldd	r24, Y+3	; 0x03
 ac6:	8f 5f       	subi	r24, 0xFF	; 255
 ac8:	8b 83       	std	Y+3, r24	; 0x03
 aca:	8b 81       	ldd	r24, Y+3	; 0x03
 acc:	87 30       	cpi	r24, 0x07	; 7
 ace:	68 f2       	brcs	.-102    	; 0xa6a <SSD_u8SetValue+0x104>
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <SSD_u8SetValue+0x170>
				  }
			}
		}
		else
			Local_u8Error = STD_ERROR_OK;
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Function return*/
	return Local_u8Error;
 ad6:	89 81       	ldd	r24, Y+1	; 0x01
}
 ad8:	0f 90       	pop	r0
 ada:	0f 90       	pop	r0
 adc:	0f 90       	pop	r0
 ade:	0f 90       	pop	r0
 ae0:	0f 90       	pop	r0
 ae2:	df 91       	pop	r29
 ae4:	cf 91       	pop	r28
 ae6:	08 95       	ret

00000ae8 <SSD_u8SetOn>:


u8 SSD_u8SetOn(u8 copy_u8SSDNum)
{
 ae8:	cf 93       	push	r28
 aea:	df 93       	push	r29
 aec:	00 d0       	rcall	.+0      	; 0xaee <SSD_u8SetOn+0x6>
 aee:	00 d0       	rcall	.+0      	; 0xaf0 <SSD_u8SetOn+0x8>
 af0:	00 d0       	rcall	.+0      	; 0xaf2 <SSD_u8SetOn+0xa>
 af2:	cd b7       	in	r28, 0x3d	; 61
 af4:	de b7       	in	r29, 0x3e	; 62
 af6:	8e 83       	std	Y+6, r24	; 0x06
	/*Local Variable holding the error state*/
		u8 Local_u8Error;

		SSD_u8OffFlag[SSD_NO_OF_SSDs] = SSD_u8_SSD_SET_OFF_FLAG_OFF;
 af8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__bss_end>

		if (copy_u8SSDNum >= SSD_NO_OF_SSDs)
 afc:	8e 81       	ldd	r24, Y+6	; 0x06
 afe:	83 30       	cpi	r24, 0x03	; 3
 b00:	10 f0       	brcs	.+4      	; 0xb06 <SSD_u8SetOn+0x1e>
		{
			Local_u8Error = STD_ERROR_NOK;
 b02:	19 82       	std	Y+1, r1	; 0x01
 b04:	37 c1       	rjmp	.+622    	; 0xd74 <SSD_u8SetOn+0x28c>
		}
		else
		{
			/*Checking whether the passed SSD number is related to Common Cathode SSD*/
			if (SSD_Au8ModuleType[copy_u8SSDNum] == SSD_COMMON_CATHODE)
 b06:	8e 81       	ldd	r24, Y+6	; 0x06
 b08:	88 2f       	mov	r24, r24
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	80 5f       	subi	r24, 0xF0	; 240
 b0e:	9e 4f       	sbci	r25, 0xFE	; 254
 b10:	fc 01       	movw	r30, r24
 b12:	80 81       	ld	r24, Z
 b14:	88 23       	and	r24, r24
 b16:	09 f0       	breq	.+2      	; 0xb1a <SSD_u8SetOn+0x32>
 b18:	98 c0       	rjmp	.+304    	; 0xc4a <SSD_u8SetOn+0x162>
			{
				if (SSD_Au8INIT_FLAG[copy_u8SSDNum] == SSD_u8_SSD_INIT_FLAG_ZERO)
 b1a:	8e 81       	ldd	r24, Y+6	; 0x06
 b1c:	88 2f       	mov	r24, r24
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	8d 5e       	subi	r24, 0xED	; 237
 b22:	9e 4f       	sbci	r25, 0xFE	; 254
 b24:	fc 01       	movw	r30, r24
 b26:	80 81       	ld	r24, Z
 b28:	88 23       	and	r24, r24
 b2a:	09 f0       	breq	.+2      	; 0xb2e <SSD_u8SetOn+0x46>
 b2c:	47 c0       	rjmp	.+142    	; 0xbbc <SSD_u8SetOn+0xd4>
				{
				  /*handling the enable pin according to the cathode SSD */
				  Local_u8Error = DIO_u8SetPinValue(SSD_Au8ModuleEnable[copy_u8SSDNum],DIO_PIN_LOW);
 b2e:	8e 81       	ldd	r24, Y+6	; 0x06
 b30:	88 2f       	mov	r24, r24
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	8f 5f       	subi	r24, 0xFF	; 255
 b36:	9e 4f       	sbci	r25, 0xFE	; 254
 b38:	fc 01       	movw	r30, r24
 b3a:	80 81       	ld	r24, Z
 b3c:	60 e0       	ldi	r22, 0x00	; 0
 b3e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8SetPinValue>
 b42:	89 83       	std	Y+1, r24	; 0x01
				  for (u8 i = SSD_u8_INIT_ITER ; i < SSD_NUMBER_OF_SEGMENTS; i++)
 b44:	1a 82       	std	Y+2, r1	; 0x02
 b46:	36 c0       	rjmp	.+108    	; 0xbb4 <SSD_u8SetOn+0xcc>
				  {
					  Local_u8Error = DIO_u8SetPinValue(SSD_Au8Segments[copy_u8SSDNum][i],SSD_Au8SEG_PATTERN_CATHODE[SSD_Au8ModuleInitValue[copy_u8SSDNum]][i]);
 b48:	8e 81       	ldd	r24, Y+6	; 0x06
 b4a:	88 2f       	mov	r24, r24
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	8c 5f       	subi	r24, 0xFC	; 252
 b50:	9e 4f       	sbci	r25, 0xFE	; 254
 b52:	fc 01       	movw	r30, r24
 b54:	80 81       	ld	r24, Z
 b56:	28 2f       	mov	r18, r24
 b58:	30 e0       	ldi	r19, 0x00	; 0
 b5a:	8a 81       	ldd	r24, Y+2	; 0x02
 b5c:	48 2f       	mov	r20, r24
 b5e:	50 e0       	ldi	r21, 0x00	; 0
 b60:	c9 01       	movw	r24, r18
 b62:	88 0f       	add	r24, r24
 b64:	99 1f       	adc	r25, r25
 b66:	88 0f       	add	r24, r24
 b68:	99 1f       	adc	r25, r25
 b6a:	88 0f       	add	r24, r24
 b6c:	99 1f       	adc	r25, r25
 b6e:	82 1b       	sub	r24, r18
 b70:	93 0b       	sbc	r25, r19
 b72:	84 0f       	add	r24, r20
 b74:	95 1f       	adc	r25, r21
 b76:	80 5a       	subi	r24, 0xA0	; 160
 b78:	9f 4f       	sbci	r25, 0xFF	; 255
 b7a:	fc 01       	movw	r30, r24
 b7c:	60 81       	ld	r22, Z
 b7e:	8e 81       	ldd	r24, Y+6	; 0x06
 b80:	28 2f       	mov	r18, r24
 b82:	30 e0       	ldi	r19, 0x00	; 0
 b84:	8a 81       	ldd	r24, Y+2	; 0x02
 b86:	48 2f       	mov	r20, r24
 b88:	50 e0       	ldi	r21, 0x00	; 0
 b8a:	c9 01       	movw	r24, r18
 b8c:	88 0f       	add	r24, r24
 b8e:	99 1f       	adc	r25, r25
 b90:	88 0f       	add	r24, r24
 b92:	99 1f       	adc	r25, r25
 b94:	88 0f       	add	r24, r24
 b96:	99 1f       	adc	r25, r25
 b98:	82 1b       	sub	r24, r18
 b9a:	93 0b       	sbc	r25, r19
 b9c:	84 0f       	add	r24, r20
 b9e:	95 1f       	adc	r25, r21
 ba0:	84 51       	subi	r24, 0x14	; 20
 ba2:	9f 4f       	sbci	r25, 0xFF	; 255
 ba4:	fc 01       	movw	r30, r24
 ba6:	80 81       	ld	r24, Z
 ba8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8SetPinValue>
 bac:	89 83       	std	Y+1, r24	; 0x01
				  for (u8 i = SSD_u8_INIT_ITER ; i < SSD_NUMBER_OF_SEGMENTS; i++)
 bae:	8a 81       	ldd	r24, Y+2	; 0x02
 bb0:	8f 5f       	subi	r24, 0xFF	; 255
 bb2:	8a 83       	std	Y+2, r24	; 0x02
 bb4:	8a 81       	ldd	r24, Y+2	; 0x02
 bb6:	87 30       	cpi	r24, 0x07	; 7
 bb8:	38 f2       	brcs	.-114    	; 0xb48 <SSD_u8SetOn+0x60>
 bba:	dc c0       	rjmp	.+440    	; 0xd74 <SSD_u8SetOn+0x28c>
				  }
				}
				else
				{
				  /*handling the enable pin according to the cathode SSD */
					Local_u8Error = DIO_u8SetPinValue(SSD_Au8ModuleEnable[copy_u8SSDNum],DIO_PIN_LOW);
 bbc:	8e 81       	ldd	r24, Y+6	; 0x06
 bbe:	88 2f       	mov	r24, r24
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	8f 5f       	subi	r24, 0xFF	; 255
 bc4:	9e 4f       	sbci	r25, 0xFE	; 254
 bc6:	fc 01       	movw	r30, r24
 bc8:	80 81       	ld	r24, Z
 bca:	60 e0       	ldi	r22, 0x00	; 0
 bcc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8SetPinValue>
 bd0:	89 83       	std	Y+1, r24	; 0x01
				  for (u8 i = SSD_u8_INIT_ITER ; i < SSD_NUMBER_OF_SEGMENTS; i++)
 bd2:	1b 82       	std	Y+3, r1	; 0x03
 bd4:	36 c0       	rjmp	.+108    	; 0xc42 <SSD_u8SetOn+0x15a>
				  {
					  Local_u8Error = DIO_u8SetPinValue(SSD_Au8Segments[copy_u8SSDNum][i],SSD_Au8SEG_PATTERN_CATHODE[SSD_u8LastDigit[copy_u8SSDNum]][i]);
 bd6:	8e 81       	ldd	r24, Y+6	; 0x06
 bd8:	88 2f       	mov	r24, r24
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	8a 5e       	subi	r24, 0xEA	; 234
 bde:	9e 4f       	sbci	r25, 0xFE	; 254
 be0:	fc 01       	movw	r30, r24
 be2:	80 81       	ld	r24, Z
 be4:	28 2f       	mov	r18, r24
 be6:	30 e0       	ldi	r19, 0x00	; 0
 be8:	8b 81       	ldd	r24, Y+3	; 0x03
 bea:	48 2f       	mov	r20, r24
 bec:	50 e0       	ldi	r21, 0x00	; 0
 bee:	c9 01       	movw	r24, r18
 bf0:	88 0f       	add	r24, r24
 bf2:	99 1f       	adc	r25, r25
 bf4:	88 0f       	add	r24, r24
 bf6:	99 1f       	adc	r25, r25
 bf8:	88 0f       	add	r24, r24
 bfa:	99 1f       	adc	r25, r25
 bfc:	82 1b       	sub	r24, r18
 bfe:	93 0b       	sbc	r25, r19
 c00:	84 0f       	add	r24, r20
 c02:	95 1f       	adc	r25, r21
 c04:	80 5a       	subi	r24, 0xA0	; 160
 c06:	9f 4f       	sbci	r25, 0xFF	; 255
 c08:	fc 01       	movw	r30, r24
 c0a:	60 81       	ld	r22, Z
 c0c:	8e 81       	ldd	r24, Y+6	; 0x06
 c0e:	28 2f       	mov	r18, r24
 c10:	30 e0       	ldi	r19, 0x00	; 0
 c12:	8b 81       	ldd	r24, Y+3	; 0x03
 c14:	48 2f       	mov	r20, r24
 c16:	50 e0       	ldi	r21, 0x00	; 0
 c18:	c9 01       	movw	r24, r18
 c1a:	88 0f       	add	r24, r24
 c1c:	99 1f       	adc	r25, r25
 c1e:	88 0f       	add	r24, r24
 c20:	99 1f       	adc	r25, r25
 c22:	88 0f       	add	r24, r24
 c24:	99 1f       	adc	r25, r25
 c26:	82 1b       	sub	r24, r18
 c28:	93 0b       	sbc	r25, r19
 c2a:	84 0f       	add	r24, r20
 c2c:	95 1f       	adc	r25, r21
 c2e:	84 51       	subi	r24, 0x14	; 20
 c30:	9f 4f       	sbci	r25, 0xFF	; 255
 c32:	fc 01       	movw	r30, r24
 c34:	80 81       	ld	r24, Z
 c36:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8SetPinValue>
 c3a:	89 83       	std	Y+1, r24	; 0x01
				  for (u8 i = SSD_u8_INIT_ITER ; i < SSD_NUMBER_OF_SEGMENTS; i++)
 c3c:	8b 81       	ldd	r24, Y+3	; 0x03
 c3e:	8f 5f       	subi	r24, 0xFF	; 255
 c40:	8b 83       	std	Y+3, r24	; 0x03
 c42:	8b 81       	ldd	r24, Y+3	; 0x03
 c44:	87 30       	cpi	r24, 0x07	; 7
 c46:	38 f2       	brcs	.-114    	; 0xbd6 <SSD_u8SetOn+0xee>
 c48:	95 c0       	rjmp	.+298    	; 0xd74 <SSD_u8SetOn+0x28c>
				  }
				}
			}
			else
			{	/*If the SSD is Common anode*/
				if (SSD_Au8INIT_FLAG[copy_u8SSDNum] == SSD_u8_SSD_INIT_FLAG_ZERO)
 c4a:	8e 81       	ldd	r24, Y+6	; 0x06
 c4c:	88 2f       	mov	r24, r24
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	8d 5e       	subi	r24, 0xED	; 237
 c52:	9e 4f       	sbci	r25, 0xFE	; 254
 c54:	fc 01       	movw	r30, r24
 c56:	80 81       	ld	r24, Z
 c58:	88 23       	and	r24, r24
 c5a:	09 f0       	breq	.+2      	; 0xc5e <SSD_u8SetOn+0x176>
 c5c:	46 c0       	rjmp	.+140    	; 0xcea <SSD_u8SetOn+0x202>
				{
				  /*handling the enable pin according to the anode SSD */
				  DIO_u8SetPinValue(SSD_Au8ModuleEnable[copy_u8SSDNum],DIO_PIN_HIGH);
 c5e:	8e 81       	ldd	r24, Y+6	; 0x06
 c60:	88 2f       	mov	r24, r24
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	8f 5f       	subi	r24, 0xFF	; 255
 c66:	9e 4f       	sbci	r25, 0xFE	; 254
 c68:	fc 01       	movw	r30, r24
 c6a:	80 81       	ld	r24, Z
 c6c:	61 e0       	ldi	r22, 0x01	; 1
 c6e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8SetPinValue>
				  for (u8 i = SSD_u8_INIT_ITER ; i < SSD_NUMBER_OF_SEGMENTS; i++)
 c72:	1c 82       	std	Y+4, r1	; 0x04
 c74:	36 c0       	rjmp	.+108    	; 0xce2 <SSD_u8SetOn+0x1fa>
				  {
					  Local_u8Error = DIO_u8SetPinValue(SSD_Au8Segments[copy_u8SSDNum][i],SSD_Au8SEG_PATTERN_ANODE[SSD_Au8ModuleInitValue[copy_u8SSDNum]][i]);
 c76:	8e 81       	ldd	r24, Y+6	; 0x06
 c78:	88 2f       	mov	r24, r24
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	8c 5f       	subi	r24, 0xFC	; 252
 c7e:	9e 4f       	sbci	r25, 0xFE	; 254
 c80:	fc 01       	movw	r30, r24
 c82:	80 81       	ld	r24, Z
 c84:	28 2f       	mov	r18, r24
 c86:	30 e0       	ldi	r19, 0x00	; 0
 c88:	8c 81       	ldd	r24, Y+4	; 0x04
 c8a:	48 2f       	mov	r20, r24
 c8c:	50 e0       	ldi	r21, 0x00	; 0
 c8e:	c9 01       	movw	r24, r18
 c90:	88 0f       	add	r24, r24
 c92:	99 1f       	adc	r25, r25
 c94:	88 0f       	add	r24, r24
 c96:	99 1f       	adc	r25, r25
 c98:	88 0f       	add	r24, r24
 c9a:	99 1f       	adc	r25, r25
 c9c:	82 1b       	sub	r24, r18
 c9e:	93 0b       	sbc	r25, r19
 ca0:	84 0f       	add	r24, r20
 ca2:	95 1f       	adc	r25, r21
 ca4:	8a 55       	subi	r24, 0x5A	; 90
 ca6:	9f 4f       	sbci	r25, 0xFF	; 255
 ca8:	fc 01       	movw	r30, r24
 caa:	60 81       	ld	r22, Z
 cac:	8e 81       	ldd	r24, Y+6	; 0x06
 cae:	28 2f       	mov	r18, r24
 cb0:	30 e0       	ldi	r19, 0x00	; 0
 cb2:	8c 81       	ldd	r24, Y+4	; 0x04
 cb4:	48 2f       	mov	r20, r24
 cb6:	50 e0       	ldi	r21, 0x00	; 0
 cb8:	c9 01       	movw	r24, r18
 cba:	88 0f       	add	r24, r24
 cbc:	99 1f       	adc	r25, r25
 cbe:	88 0f       	add	r24, r24
 cc0:	99 1f       	adc	r25, r25
 cc2:	88 0f       	add	r24, r24
 cc4:	99 1f       	adc	r25, r25
 cc6:	82 1b       	sub	r24, r18
 cc8:	93 0b       	sbc	r25, r19
 cca:	84 0f       	add	r24, r20
 ccc:	95 1f       	adc	r25, r21
 cce:	84 51       	subi	r24, 0x14	; 20
 cd0:	9f 4f       	sbci	r25, 0xFF	; 255
 cd2:	fc 01       	movw	r30, r24
 cd4:	80 81       	ld	r24, Z
 cd6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8SetPinValue>
 cda:	89 83       	std	Y+1, r24	; 0x01
				  for (u8 i = SSD_u8_INIT_ITER ; i < SSD_NUMBER_OF_SEGMENTS; i++)
 cdc:	8c 81       	ldd	r24, Y+4	; 0x04
 cde:	8f 5f       	subi	r24, 0xFF	; 255
 ce0:	8c 83       	std	Y+4, r24	; 0x04
 ce2:	8c 81       	ldd	r24, Y+4	; 0x04
 ce4:	87 30       	cpi	r24, 0x07	; 7
 ce6:	38 f2       	brcs	.-114    	; 0xc76 <SSD_u8SetOn+0x18e>
 ce8:	45 c0       	rjmp	.+138    	; 0xd74 <SSD_u8SetOn+0x28c>
				  }
				}
				else
				{
				  /*handling the enable pin according to the anode SSD */
				  DIO_u8SetPinValue(SSD_Au8ModuleEnable[copy_u8SSDNum],DIO_PIN_HIGH);
 cea:	8e 81       	ldd	r24, Y+6	; 0x06
 cec:	88 2f       	mov	r24, r24
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	8f 5f       	subi	r24, 0xFF	; 255
 cf2:	9e 4f       	sbci	r25, 0xFE	; 254
 cf4:	fc 01       	movw	r30, r24
 cf6:	80 81       	ld	r24, Z
 cf8:	61 e0       	ldi	r22, 0x01	; 1
 cfa:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8SetPinValue>
				  for (u8 i = SSD_u8_INIT_ITER ; i < SSD_NUMBER_OF_SEGMENTS; i++)
 cfe:	1d 82       	std	Y+5, r1	; 0x05
 d00:	36 c0       	rjmp	.+108    	; 0xd6e <SSD_u8SetOn+0x286>
				  {
					  Local_u8Error = DIO_u8SetPinValue(SSD_Au8Segments[copy_u8SSDNum][i],SSD_Au8SEG_PATTERN_ANODE[SSD_u8LastDigit[copy_u8SSDNum]][i]);
 d02:	8e 81       	ldd	r24, Y+6	; 0x06
 d04:	88 2f       	mov	r24, r24
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	8a 5e       	subi	r24, 0xEA	; 234
 d0a:	9e 4f       	sbci	r25, 0xFE	; 254
 d0c:	fc 01       	movw	r30, r24
 d0e:	80 81       	ld	r24, Z
 d10:	28 2f       	mov	r18, r24
 d12:	30 e0       	ldi	r19, 0x00	; 0
 d14:	8d 81       	ldd	r24, Y+5	; 0x05
 d16:	48 2f       	mov	r20, r24
 d18:	50 e0       	ldi	r21, 0x00	; 0
 d1a:	c9 01       	movw	r24, r18
 d1c:	88 0f       	add	r24, r24
 d1e:	99 1f       	adc	r25, r25
 d20:	88 0f       	add	r24, r24
 d22:	99 1f       	adc	r25, r25
 d24:	88 0f       	add	r24, r24
 d26:	99 1f       	adc	r25, r25
 d28:	82 1b       	sub	r24, r18
 d2a:	93 0b       	sbc	r25, r19
 d2c:	84 0f       	add	r24, r20
 d2e:	95 1f       	adc	r25, r21
 d30:	8a 55       	subi	r24, 0x5A	; 90
 d32:	9f 4f       	sbci	r25, 0xFF	; 255
 d34:	fc 01       	movw	r30, r24
 d36:	60 81       	ld	r22, Z
 d38:	8e 81       	ldd	r24, Y+6	; 0x06
 d3a:	28 2f       	mov	r18, r24
 d3c:	30 e0       	ldi	r19, 0x00	; 0
 d3e:	8d 81       	ldd	r24, Y+5	; 0x05
 d40:	48 2f       	mov	r20, r24
 d42:	50 e0       	ldi	r21, 0x00	; 0
 d44:	c9 01       	movw	r24, r18
 d46:	88 0f       	add	r24, r24
 d48:	99 1f       	adc	r25, r25
 d4a:	88 0f       	add	r24, r24
 d4c:	99 1f       	adc	r25, r25
 d4e:	88 0f       	add	r24, r24
 d50:	99 1f       	adc	r25, r25
 d52:	82 1b       	sub	r24, r18
 d54:	93 0b       	sbc	r25, r19
 d56:	84 0f       	add	r24, r20
 d58:	95 1f       	adc	r25, r21
 d5a:	84 51       	subi	r24, 0x14	; 20
 d5c:	9f 4f       	sbci	r25, 0xFF	; 255
 d5e:	fc 01       	movw	r30, r24
 d60:	80 81       	ld	r24, Z
 d62:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8SetPinValue>
 d66:	89 83       	std	Y+1, r24	; 0x01
				  for (u8 i = SSD_u8_INIT_ITER ; i < SSD_NUMBER_OF_SEGMENTS; i++)
 d68:	8d 81       	ldd	r24, Y+5	; 0x05
 d6a:	8f 5f       	subi	r24, 0xFF	; 255
 d6c:	8d 83       	std	Y+5, r24	; 0x05
 d6e:	8d 81       	ldd	r24, Y+5	; 0x05
 d70:	87 30       	cpi	r24, 0x07	; 7
 d72:	38 f2       	brcs	.-114    	; 0xd02 <SSD_u8SetOn+0x21a>
				  }
				}
			}
		}
		/*Function return*/
		return Local_u8Error;
 d74:	89 81       	ldd	r24, Y+1	; 0x01
}
 d76:	26 96       	adiw	r28, 0x06	; 6
 d78:	0f b6       	in	r0, 0x3f	; 63
 d7a:	f8 94       	cli
 d7c:	de bf       	out	0x3e, r29	; 62
 d7e:	0f be       	out	0x3f, r0	; 63
 d80:	cd bf       	out	0x3d, r28	; 61
 d82:	df 91       	pop	r29
 d84:	cf 91       	pop	r28
 d86:	08 95       	ret

00000d88 <SSD_u8SetOff>:


u8 SSD_u8SetOff(u8 Copy_u8SsdNb)
{
 d88:	cf 93       	push	r28
 d8a:	df 93       	push	r29
 d8c:	00 d0       	rcall	.+0      	; 0xd8e <SSD_u8SetOff+0x6>
 d8e:	cd b7       	in	r28, 0x3d	; 61
 d90:	de b7       	in	r29, 0x3e	; 62
 d92:	8a 83       	std	Y+2, r24	; 0x02
	/*Local Variable holding the error state*/
	u8 Local_u8Error;
	SSD_u8OffFlag[SSD_NO_OF_SSDs] = SSD_u8_SSD_SET_OFF_FLAG_ON;
 d94:	81 e0       	ldi	r24, 0x01	; 1
 d96:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__bss_end>

	if (Copy_u8SsdNb >= SSD_NO_OF_SSDs)
 d9a:	8a 81       	ldd	r24, Y+2	; 0x02
 d9c:	83 30       	cpi	r24, 0x03	; 3
 d9e:	10 f0       	brcs	.+4      	; 0xda4 <SSD_u8SetOff+0x1c>
	{
		Local_u8Error = STD_ERROR_NOK;
 da0:	19 82       	std	Y+1, r1	; 0x01
 da2:	20 c0       	rjmp	.+64     	; 0xde4 <SSD_u8SetOff+0x5c>
	}
	else
	{
		/*Checking whether the passed SSD number is related to Common Cathode SSD*/
		if (SSD_Au8ModuleType[Copy_u8SsdNb] == SSD_COMMON_CATHODE)
 da4:	8a 81       	ldd	r24, Y+2	; 0x02
 da6:	88 2f       	mov	r24, r24
 da8:	90 e0       	ldi	r25, 0x00	; 0
 daa:	80 5f       	subi	r24, 0xF0	; 240
 dac:	9e 4f       	sbci	r25, 0xFE	; 254
 dae:	fc 01       	movw	r30, r24
 db0:	80 81       	ld	r24, Z
 db2:	88 23       	and	r24, r24
 db4:	61 f4       	brne	.+24     	; 0xdce <SSD_u8SetOff+0x46>
		{
			  /*handling the enable pin according to the cathode SSD */
			  Local_u8Error = DIO_u8SetPinValue(SSD_Au8ModuleEnable[Copy_u8SsdNb],DIO_PIN_HIGH);
 db6:	8a 81       	ldd	r24, Y+2	; 0x02
 db8:	88 2f       	mov	r24, r24
 dba:	90 e0       	ldi	r25, 0x00	; 0
 dbc:	8f 5f       	subi	r24, 0xFF	; 255
 dbe:	9e 4f       	sbci	r25, 0xFE	; 254
 dc0:	fc 01       	movw	r30, r24
 dc2:	80 81       	ld	r24, Z
 dc4:	61 e0       	ldi	r22, 0x01	; 1
 dc6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8SetPinValue>
 dca:	89 83       	std	Y+1, r24	; 0x01
 dcc:	0b c0       	rjmp	.+22     	; 0xde4 <SSD_u8SetOff+0x5c>
		}
		else
		{
			  /*handling the enable pin according to the anode SSD */
			  Local_u8Error = DIO_u8SetPinValue(SSD_Au8ModuleEnable[Copy_u8SsdNb],DIO_PIN_LOW);
 dce:	8a 81       	ldd	r24, Y+2	; 0x02
 dd0:	88 2f       	mov	r24, r24
 dd2:	90 e0       	ldi	r25, 0x00	; 0
 dd4:	8f 5f       	subi	r24, 0xFF	; 255
 dd6:	9e 4f       	sbci	r25, 0xFE	; 254
 dd8:	fc 01       	movw	r30, r24
 dda:	80 81       	ld	r24, Z
 ddc:	60 e0       	ldi	r22, 0x00	; 0
 dde:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8SetPinValue>
 de2:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	/*Function return*/
	return Local_u8Error;
 de4:	89 81       	ldd	r24, Y+1	; 0x01
}
 de6:	0f 90       	pop	r0
 de8:	0f 90       	pop	r0
 dea:	df 91       	pop	r29
 dec:	cf 91       	pop	r28
 dee:	08 95       	ret

00000df0 <main>:




void main (void)
{
 df0:	cf 93       	push	r28
 df2:	df 93       	push	r29
 df4:	00 d0       	rcall	.+0      	; 0xdf6 <main+0x6>
 df6:	0f 92       	push	r0
 df8:	cd b7       	in	r28, 0x3d	; 61
 dfa:	de b7       	in	r29, 0x3e	; 62
	DIO_vInit();
 dfc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vInit>


	SSD_u8SetOn(0);
 e00:	80 e0       	ldi	r24, 0x00	; 0
 e02:	0e 94 74 05 	call	0xae8	; 0xae8 <SSD_u8SetOn>
	SSD_u8SetOn(1);
 e06:	81 e0       	ldi	r24, 0x01	; 1
 e08:	0e 94 74 05 	call	0xae8	; 0xae8 <SSD_u8SetOn>
	SSD_u8SetOn(2);
 e0c:	82 e0       	ldi	r24, 0x02	; 2
 e0e:	0e 94 74 05 	call	0xae8	; 0xae8 <SSD_u8SetOn>
	while(1)
	{

		for(u8 k=1; k < 10; k++)
 e12:	81 e0       	ldi	r24, 0x01	; 1
 e14:	89 83       	std	Y+1, r24	; 0x01
 e16:	2c c0       	rjmp	.+88     	; 0xe70 <main+0x80>
		{
		for(u8 j=1; j < 10; j++)
 e18:	81 e0       	ldi	r24, 0x01	; 1
 e1a:	8a 83       	std	Y+2, r24	; 0x02
 e1c:	1b c0       	rjmp	.+54     	; 0xe54 <main+0x64>
		{

			for(u8 i=0; i < 10; i++)
 e1e:	1b 82       	std	Y+3, r1	; 0x03
 e20:	0b c0       	rjmp	.+22     	; 0xe38 <main+0x48>
			{
				SSD_u8SetValue(0, i);
 e22:	6b 81       	ldd	r22, Y+3	; 0x03
 e24:	80 e0       	ldi	r24, 0x00	; 0
 e26:	0e 94 b3 04 	call	0x966	; 0x966 <SSD_u8SetValue>
				Lib_vDelayMs(10);
 e2a:	8a e0       	ldi	r24, 0x0A	; 10
 e2c:	90 e0       	ldi	r25, 0x00	; 0
 e2e:	0e 94 37 04 	call	0x86e	; 0x86e <Lib_vDelayMs>
			for(u8 i=0; i < 10; i++)
 e32:	8b 81       	ldd	r24, Y+3	; 0x03
 e34:	8f 5f       	subi	r24, 0xFF	; 255
 e36:	8b 83       	std	Y+3, r24	; 0x03
 e38:	8b 81       	ldd	r24, Y+3	; 0x03
 e3a:	8a 30       	cpi	r24, 0x0A	; 10
 e3c:	90 f3       	brcs	.-28     	; 0xe22 <main+0x32>
			}
			SSD_u8SetValue(1, j);
 e3e:	6a 81       	ldd	r22, Y+2	; 0x02
 e40:	81 e0       	ldi	r24, 0x01	; 1
 e42:	0e 94 b3 04 	call	0x966	; 0x966 <SSD_u8SetValue>
			Lib_vDelayMs(10);
 e46:	8a e0       	ldi	r24, 0x0A	; 10
 e48:	90 e0       	ldi	r25, 0x00	; 0
 e4a:	0e 94 37 04 	call	0x86e	; 0x86e <Lib_vDelayMs>
		for(u8 j=1; j < 10; j++)
 e4e:	8a 81       	ldd	r24, Y+2	; 0x02
 e50:	8f 5f       	subi	r24, 0xFF	; 255
 e52:	8a 83       	std	Y+2, r24	; 0x02
 e54:	8a 81       	ldd	r24, Y+2	; 0x02
 e56:	8a 30       	cpi	r24, 0x0A	; 10
 e58:	10 f3       	brcs	.-60     	; 0xe1e <main+0x2e>

		}
		SSD_u8SetValue(2, k);
 e5a:	69 81       	ldd	r22, Y+1	; 0x01
 e5c:	82 e0       	ldi	r24, 0x02	; 2
 e5e:	0e 94 b3 04 	call	0x966	; 0x966 <SSD_u8SetValue>
		Lib_vDelayMs(10);
 e62:	8a e0       	ldi	r24, 0x0A	; 10
 e64:	90 e0       	ldi	r25, 0x00	; 0
 e66:	0e 94 37 04 	call	0x86e	; 0x86e <Lib_vDelayMs>
		for(u8 k=1; k < 10; k++)
 e6a:	89 81       	ldd	r24, Y+1	; 0x01
 e6c:	8f 5f       	subi	r24, 0xFF	; 255
 e6e:	89 83       	std	Y+1, r24	; 0x01
 e70:	89 81       	ldd	r24, Y+1	; 0x01
 e72:	8a 30       	cpi	r24, 0x0A	; 10
 e74:	88 f2       	brcs	.-94     	; 0xe18 <main+0x28>
 e76:	cd cf       	rjmp	.-102    	; 0xe12 <main+0x22>

00000e78 <__umulhisi3>:
 e78:	a2 9f       	mul	r26, r18
 e7a:	b0 01       	movw	r22, r0
 e7c:	b3 9f       	mul	r27, r19
 e7e:	c0 01       	movw	r24, r0
 e80:	a3 9f       	mul	r26, r19
 e82:	70 0d       	add	r23, r0
 e84:	81 1d       	adc	r24, r1
 e86:	11 24       	eor	r1, r1
 e88:	91 1d       	adc	r25, r1
 e8a:	b2 9f       	mul	r27, r18
 e8c:	70 0d       	add	r23, r0
 e8e:	81 1d       	adc	r24, r1
 e90:	11 24       	eor	r1, r1
 e92:	91 1d       	adc	r25, r1
 e94:	08 95       	ret

00000e96 <_exit>:
 e96:	f8 94       	cli

00000e98 <__stop_program>:
 e98:	ff cf       	rjmp	.-2      	; 0xe98 <__stop_program>
